/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Library to interface with cameras over usb and serial.
class libgphoto2 {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  libgphoto2(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int gp_abilities_list_new(
    ffi.Pointer<ffi.Pointer<_CameraAbilitiesList>> list,
  ) {
    _gp_abilities_list_new ??= _dylib.lookupFunction<_c_gp_abilities_list_new,
        _dart_gp_abilities_list_new>('gp_abilities_list_new');
    return _gp_abilities_list_new(
      list,
    );
  }

  _dart_gp_abilities_list_new _gp_abilities_list_new;

  int gp_abilities_list_free(
    ffi.Pointer<_CameraAbilitiesList> list,
  ) {
    _gp_abilities_list_free ??= _dylib.lookupFunction<_c_gp_abilities_list_free,
        _dart_gp_abilities_list_free>('gp_abilities_list_free');
    return _gp_abilities_list_free(
      list,
    );
  }

  _dart_gp_abilities_list_free _gp_abilities_list_free;

  int gp_abilities_list_load(
    ffi.Pointer<_CameraAbilitiesList> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_abilities_list_load ??= _dylib.lookupFunction<_c_gp_abilities_list_load,
        _dart_gp_abilities_list_load>('gp_abilities_list_load');
    return _gp_abilities_list_load(
      list,
      context,
    );
  }

  _dart_gp_abilities_list_load _gp_abilities_list_load;

  int gp_abilities_list_load_dir(
    ffi.Pointer<_CameraAbilitiesList> list,
    ffi.Pointer<ffi.Int8> dir,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_abilities_list_load_dir ??= _dylib.lookupFunction<
        _c_gp_abilities_list_load_dir,
        _dart_gp_abilities_list_load_dir>('gp_abilities_list_load_dir');
    return _gp_abilities_list_load_dir(
      list,
      dir,
      context,
    );
  }

  _dart_gp_abilities_list_load_dir _gp_abilities_list_load_dir;

  int gp_abilities_list_reset(
    ffi.Pointer<_CameraAbilitiesList> list,
  ) {
    _gp_abilities_list_reset ??= _dylib.lookupFunction<
        _c_gp_abilities_list_reset,
        _dart_gp_abilities_list_reset>('gp_abilities_list_reset');
    return _gp_abilities_list_reset(
      list,
    );
  }

  _dart_gp_abilities_list_reset _gp_abilities_list_reset;

  int gp_abilities_list_detect(
    ffi.Pointer<_CameraAbilitiesList> list,
    ffi.Pointer<ffi.Int32> info_list,
    ffi.Pointer<ffi.Int32> l,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_abilities_list_detect ??= _dylib.lookupFunction<
        _c_gp_abilities_list_detect,
        _dart_gp_abilities_list_detect>('gp_abilities_list_detect');
    return _gp_abilities_list_detect(
      list,
      info_list,
      l,
      context,
    );
  }

  _dart_gp_abilities_list_detect _gp_abilities_list_detect;

  int gp_abilities_list_count(
    ffi.Pointer<_CameraAbilitiesList> list,
  ) {
    _gp_abilities_list_count ??= _dylib.lookupFunction<
        _c_gp_abilities_list_count,
        _dart_gp_abilities_list_count>('gp_abilities_list_count');
    return _gp_abilities_list_count(
      list,
    );
  }

  _dart_gp_abilities_list_count _gp_abilities_list_count;

  int gp_abilities_list_lookup_model(
    ffi.Pointer<_CameraAbilitiesList> list,
    ffi.Pointer<ffi.Int8> model,
  ) {
    _gp_abilities_list_lookup_model ??= _dylib.lookupFunction<
        _c_gp_abilities_list_lookup_model,
        _dart_gp_abilities_list_lookup_model>('gp_abilities_list_lookup_model');
    return _gp_abilities_list_lookup_model(
      list,
      model,
    );
  }

  _dart_gp_abilities_list_lookup_model _gp_abilities_list_lookup_model;

  int gp_abilities_list_get_abilities(
    ffi.Pointer<_CameraAbilitiesList> list,
    int index,
    ffi.Pointer<CameraAbilities> abilities,
  ) {
    _gp_abilities_list_get_abilities ??= _dylib.lookupFunction<
            _c_gp_abilities_list_get_abilities,
            _dart_gp_abilities_list_get_abilities>(
        'gp_abilities_list_get_abilities');
    return _gp_abilities_list_get_abilities(
      list,
      index,
      abilities,
    );
  }

  _dart_gp_abilities_list_get_abilities _gp_abilities_list_get_abilities;

  ffi.Pointer<ffi.Int8> gp_message_codeset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _gp_message_codeset ??=
        _dylib.lookupFunction<_c_gp_message_codeset, _dart_gp_message_codeset>(
            'gp_message_codeset');
    return _gp_message_codeset(
      arg0,
    );
  }

  _dart_gp_message_codeset _gp_message_codeset;

  /// Create a new camera device.
  int gp_camera_new(
    ffi.Pointer<ffi.Pointer<_Camera>> camera,
  ) {
    _gp_camera_new ??= _dylib
        .lookupFunction<_c_gp_camera_new, _dart_gp_camera_new>('gp_camera_new');
    return _gp_camera_new(
      camera,
    );
  }

  _dart_gp_camera_new _gp_camera_new;

  /// \name Preparing initialization
  /// @{
  int gp_camera_set_abilities(
    ffi.Pointer<_Camera> camera,
    int abilities,
  ) {
    _gp_camera_set_abilities ??= _dylib.lookupFunction<
        _c_gp_camera_set_abilities,
        _dart_gp_camera_set_abilities>('gp_camera_set_abilities');
    return _gp_camera_set_abilities(
      camera,
      abilities,
    );
  }

  _dart_gp_camera_set_abilities _gp_camera_set_abilities;

  int gp_camera_get_abilities(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> abilities,
  ) {
    _gp_camera_get_abilities ??= _dylib.lookupFunction<
        _c_gp_camera_get_abilities,
        _dart_gp_camera_get_abilities>('gp_camera_get_abilities');
    return _gp_camera_get_abilities(
      camera,
      abilities,
    );
  }

  _dart_gp_camera_get_abilities _gp_camera_get_abilities;

  int gp_camera_set_port_info(
    ffi.Pointer<_Camera> camera,
    int info,
  ) {
    _gp_camera_set_port_info ??= _dylib.lookupFunction<
        _c_gp_camera_set_port_info,
        _dart_gp_camera_set_port_info>('gp_camera_set_port_info');
    return _gp_camera_set_port_info(
      camera,
      info,
    );
  }

  _dart_gp_camera_set_port_info _gp_camera_set_port_info;

  int gp_camera_get_port_info(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> info,
  ) {
    _gp_camera_get_port_info ??= _dylib.lookupFunction<
        _c_gp_camera_get_port_info,
        _dart_gp_camera_get_port_info>('gp_camera_get_port_info');
    return _gp_camera_get_port_info(
      camera,
      info,
    );
  }

  _dart_gp_camera_get_port_info _gp_camera_get_port_info;

  /// \name camera speed
  ///
  /// You normally don't use that. If you do, you prevent the camera driver
  /// from selecting the optimal speed.
  ///
  /// @{
  int gp_camera_set_port_speed(
    ffi.Pointer<_Camera> camera,
    int speed,
  ) {
    _gp_camera_set_port_speed ??= _dylib.lookupFunction<
        _c_gp_camera_set_port_speed,
        _dart_gp_camera_set_port_speed>('gp_camera_set_port_speed');
    return _gp_camera_set_port_speed(
      camera,
      speed,
    );
  }

  _dart_gp_camera_set_port_speed _gp_camera_set_port_speed;

  int gp_camera_get_port_speed(
    ffi.Pointer<_Camera> camera,
  ) {
    _gp_camera_get_port_speed ??= _dylib.lookupFunction<
        _c_gp_camera_get_port_speed,
        _dart_gp_camera_get_port_speed>('gp_camera_get_port_speed');
    return _gp_camera_get_port_speed(
      camera,
    );
  }

  _dart_gp_camera_get_port_speed _gp_camera_get_port_speed;

  /// \name Initialization
  /// @{
  int gp_camera_autodetect(
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_autodetect ??= _dylib.lookupFunction<_c_gp_camera_autodetect,
        _dart_gp_camera_autodetect>('gp_camera_autodetect');
    return _gp_camera_autodetect(
      list,
      context,
    );
  }

  _dart_gp_camera_autodetect _gp_camera_autodetect;

  int gp_camera_init(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_init ??=
        _dylib.lookupFunction<_c_gp_camera_init, _dart_gp_camera_init>(
            'gp_camera_init');
    return _gp_camera_init(
      camera,
      context,
    );
  }

  _dart_gp_camera_init _gp_camera_init;

  int gp_camera_exit(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_exit ??=
        _dylib.lookupFunction<_c_gp_camera_exit, _dart_gp_camera_exit>(
            'gp_camera_exit');
    return _gp_camera_exit(
      camera,
      context,
    );
  }

  _dart_gp_camera_exit _gp_camera_exit;

  /// \name Operations on cameras
  /// @{
  int gp_camera_ref(
    ffi.Pointer<_Camera> camera,
  ) {
    _gp_camera_ref ??= _dylib
        .lookupFunction<_c_gp_camera_ref, _dart_gp_camera_ref>('gp_camera_ref');
    return _gp_camera_ref(
      camera,
    );
  }

  _dart_gp_camera_ref _gp_camera_ref;

  int gp_camera_unref(
    ffi.Pointer<_Camera> camera,
  ) {
    _gp_camera_unref ??=
        _dylib.lookupFunction<_c_gp_camera_unref, _dart_gp_camera_unref>(
            'gp_camera_unref');
    return _gp_camera_unref(
      camera,
    );
  }

  _dart_gp_camera_unref _gp_camera_unref;

  int gp_camera_free(
    ffi.Pointer<_Camera> camera,
  ) {
    _gp_camera_free ??=
        _dylib.lookupFunction<_c_gp_camera_free, _dart_gp_camera_free>(
            'gp_camera_free');
    return _gp_camera_free(
      camera,
    );
  }

  _dart_gp_camera_free _gp_camera_free;

  int gp_camera_get_config(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> window,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_config ??= _dylib.lookupFunction<_c_gp_camera_get_config,
        _dart_gp_camera_get_config>('gp_camera_get_config');
    return _gp_camera_get_config(
      camera,
      window,
      context,
    );
  }

  _dart_gp_camera_get_config _gp_camera_get_config;

  int gp_camera_list_config(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_list_config ??= _dylib.lookupFunction<_c_gp_camera_list_config,
        _dart_gp_camera_list_config>('gp_camera_list_config');
    return _gp_camera_list_config(
      camera,
      list,
      context,
    );
  }

  _dart_gp_camera_list_config _gp_camera_list_config;

  int gp_camera_get_single_config(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> widget,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_single_config ??= _dylib.lookupFunction<
        _c_gp_camera_get_single_config,
        _dart_gp_camera_get_single_config>('gp_camera_get_single_config');
    return _gp_camera_get_single_config(
      camera,
      name,
      widget,
      context,
    );
  }

  _dart_gp_camera_get_single_config _gp_camera_get_single_config;

  int gp_camera_set_config(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> window,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_set_config ??= _dylib.lookupFunction<_c_gp_camera_set_config,
        _dart_gp_camera_set_config>('gp_camera_set_config');
    return _gp_camera_set_config(
      camera,
      window,
      context,
    );
  }

  _dart_gp_camera_set_config _gp_camera_set_config;

  int gp_camera_set_single_config(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> widget,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_set_single_config ??= _dylib.lookupFunction<
        _c_gp_camera_set_single_config,
        _dart_gp_camera_set_single_config>('gp_camera_set_single_config');
    return _gp_camera_set_single_config(
      camera,
      name,
      widget,
      context,
    );
  }

  _dart_gp_camera_set_single_config _gp_camera_set_single_config;

  int gp_camera_get_summary(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<CameraText> summary,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_summary ??= _dylib.lookupFunction<_c_gp_camera_get_summary,
        _dart_gp_camera_get_summary>('gp_camera_get_summary');
    return _gp_camera_get_summary(
      camera,
      summary,
      context,
    );
  }

  _dart_gp_camera_get_summary _gp_camera_get_summary;

  int gp_camera_get_manual(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<CameraText> manual,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_manual ??= _dylib.lookupFunction<_c_gp_camera_get_manual,
        _dart_gp_camera_get_manual>('gp_camera_get_manual');
    return _gp_camera_get_manual(
      camera,
      manual,
      context,
    );
  }

  _dart_gp_camera_get_manual _gp_camera_get_manual;

  int gp_camera_get_about(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<CameraText> about,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_about ??= _dylib.lookupFunction<_c_gp_camera_get_about,
        _dart_gp_camera_get_about>('gp_camera_get_about');
    return _gp_camera_get_about(
      camera,
      about,
      context,
    );
  }

  _dart_gp_camera_get_about _gp_camera_get_about;

  int gp_camera_capture(
    ffi.Pointer<_Camera> camera,
    int type,
    ffi.Pointer<CameraFilePath> path,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_capture ??=
        _dylib.lookupFunction<_c_gp_camera_capture, _dart_gp_camera_capture>(
            'gp_camera_capture');
    return _gp_camera_capture(
      camera,
      type,
      path,
      context,
    );
  }

  _dart_gp_camera_capture _gp_camera_capture;

  int gp_camera_trigger_capture(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_trigger_capture ??= _dylib.lookupFunction<
        _c_gp_camera_trigger_capture,
        _dart_gp_camera_trigger_capture>('gp_camera_trigger_capture');
    return _gp_camera_trigger_capture(
      camera,
      context,
    );
  }

  _dart_gp_camera_trigger_capture _gp_camera_trigger_capture;

  int gp_camera_capture_preview(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_capture_preview ??= _dylib.lookupFunction<
        _c_gp_camera_capture_preview,
        _dart_gp_camera_capture_preview>('gp_camera_capture_preview');
    return _gp_camera_capture_preview(
      camera,
      file,
      context,
    );
  }

  _dart_gp_camera_capture_preview _gp_camera_capture_preview;

  int gp_camera_wait_for_event(
    ffi.Pointer<_Camera> camera,
    int timeout,
    ffi.Pointer<ffi.Int32> eventtype,
    ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_wait_for_event ??= _dylib.lookupFunction<
        _c_gp_camera_wait_for_event,
        _dart_gp_camera_wait_for_event>('gp_camera_wait_for_event');
    return _gp_camera_wait_for_event(
      camera,
      timeout,
      eventtype,
      eventdata,
      context,
    );
  }

  _dart_gp_camera_wait_for_event _gp_camera_wait_for_event;

  int gp_camera_get_storageinfo(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_get_storageinfo ??= _dylib.lookupFunction<
        _c_gp_camera_get_storageinfo,
        _dart_gp_camera_get_storageinfo>('gp_camera_get_storageinfo');
    return _gp_camera_get_storageinfo(
      camera,
      arg1,
      arg2,
      context,
    );
  }

  _dart_gp_camera_get_storageinfo _gp_camera_get_storageinfo;

  /// \name Operations on folders
  /// @{
  int gp_camera_folder_list_files(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_list_files ??= _dylib.lookupFunction<
        _c_gp_camera_folder_list_files,
        _dart_gp_camera_folder_list_files>('gp_camera_folder_list_files');
    return _gp_camera_folder_list_files(
      camera,
      folder,
      list,
      context,
    );
  }

  _dart_gp_camera_folder_list_files _gp_camera_folder_list_files;

  int gp_camera_folder_list_folders(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_list_folders ??= _dylib.lookupFunction<
        _c_gp_camera_folder_list_folders,
        _dart_gp_camera_folder_list_folders>('gp_camera_folder_list_folders');
    return _gp_camera_folder_list_folders(
      camera,
      folder,
      list,
      context,
    );
  }

  _dart_gp_camera_folder_list_folders _gp_camera_folder_list_folders;

  int gp_camera_folder_delete_all(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_delete_all ??= _dylib.lookupFunction<
        _c_gp_camera_folder_delete_all,
        _dart_gp_camera_folder_delete_all>('gp_camera_folder_delete_all');
    return _gp_camera_folder_delete_all(
      camera,
      folder,
      context,
    );
  }

  _dart_gp_camera_folder_delete_all _gp_camera_folder_delete_all;

  int gp_camera_folder_put_file(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    int type,
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_put_file ??= _dylib.lookupFunction<
        _c_gp_camera_folder_put_file,
        _dart_gp_camera_folder_put_file>('gp_camera_folder_put_file');
    return _gp_camera_folder_put_file(
      camera,
      folder,
      filename,
      type,
      file,
      context,
    );
  }

  _dart_gp_camera_folder_put_file _gp_camera_folder_put_file;

  int gp_camera_folder_make_dir(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_make_dir ??= _dylib.lookupFunction<
        _c_gp_camera_folder_make_dir,
        _dart_gp_camera_folder_make_dir>('gp_camera_folder_make_dir');
    return _gp_camera_folder_make_dir(
      camera,
      folder,
      name,
      context,
    );
  }

  _dart_gp_camera_folder_make_dir _gp_camera_folder_make_dir;

  int gp_camera_folder_remove_dir(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_folder_remove_dir ??= _dylib.lookupFunction<
        _c_gp_camera_folder_remove_dir,
        _dart_gp_camera_folder_remove_dir>('gp_camera_folder_remove_dir');
    return _gp_camera_folder_remove_dir(
      camera,
      folder,
      name,
      context,
    );
  }

  _dart_gp_camera_folder_remove_dir _gp_camera_folder_remove_dir;

  /// \name Operations on files
  /// @{
  int gp_camera_file_get_info(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int32> info,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_file_get_info ??= _dylib.lookupFunction<
        _c_gp_camera_file_get_info,
        _dart_gp_camera_file_get_info>('gp_camera_file_get_info');
    return _gp_camera_file_get_info(
      camera,
      folder,
      file,
      info,
      context,
    );
  }

  _dart_gp_camera_file_get_info _gp_camera_file_get_info;

  int gp_camera_file_set_info(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> file,
    int info,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_file_set_info ??= _dylib.lookupFunction<
        _c_gp_camera_file_set_info,
        _dart_gp_camera_file_set_info>('gp_camera_file_set_info');
    return _gp_camera_file_set_info(
      camera,
      folder,
      file,
      info,
      context,
    );
  }

  _dart_gp_camera_file_set_info _gp_camera_file_set_info;

  int gp_camera_file_get(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> file,
    int type,
    ffi.Pointer<ffi.Int32> camera_file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_file_get ??=
        _dylib.lookupFunction<_c_gp_camera_file_get, _dart_gp_camera_file_get>(
            'gp_camera_file_get');
    return _gp_camera_file_get(
      camera,
      folder,
      file,
      type,
      camera_file,
      context,
    );
  }

  _dart_gp_camera_file_get _gp_camera_file_get;

  int gp_camera_file_read(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> file,
    int type,
    int offset,
    ffi.Pointer<ffi.Int8> buf,
    ffi.Pointer<ffi.Int32> size,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_file_read ??= _dylib.lookupFunction<_c_gp_camera_file_read,
        _dart_gp_camera_file_read>('gp_camera_file_read');
    return _gp_camera_file_read(
      camera,
      folder,
      file,
      type,
      offset,
      buf,
      size,
      context,
    );
  }

  _dart_gp_camera_file_read _gp_camera_file_read;

  int gp_camera_file_delete(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_camera_file_delete ??= _dylib.lookupFunction<_c_gp_camera_file_delete,
        _dart_gp_camera_file_delete>('gp_camera_file_delete');
    return _gp_camera_file_delete(
      camera,
      folder,
      file,
      context,
    );
  }

  _dart_gp_camera_file_delete _gp_camera_file_delete;

  void gp_camera_set_timeout_funcs(
    ffi.Pointer<_Camera> camera,
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutStartFunc>> start_func,
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutStopFunc>> stop_func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_camera_set_timeout_funcs ??= _dylib.lookupFunction<
        _c_gp_camera_set_timeout_funcs,
        _dart_gp_camera_set_timeout_funcs>('gp_camera_set_timeout_funcs');
    return _gp_camera_set_timeout_funcs(
      camera,
      start_func,
      stop_func,
      data,
    );
  }

  _dart_gp_camera_set_timeout_funcs _gp_camera_set_timeout_funcs;

  int gp_camera_start_timeout(
    ffi.Pointer<_Camera> camera,
    int timeout,
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutFunc>> func,
  ) {
    _gp_camera_start_timeout ??= _dylib.lookupFunction<
        _c_gp_camera_start_timeout,
        _dart_gp_camera_start_timeout>('gp_camera_start_timeout');
    return _gp_camera_start_timeout(
      camera,
      timeout,
      func,
    );
  }

  _dart_gp_camera_start_timeout _gp_camera_start_timeout;

  void gp_camera_stop_timeout(
    ffi.Pointer<_Camera> camera,
    int id,
  ) {
    _gp_camera_stop_timeout ??= _dylib.lookupFunction<_c_gp_camera_stop_timeout,
        _dart_gp_camera_stop_timeout>('gp_camera_stop_timeout');
    return _gp_camera_stop_timeout(
      camera,
      id,
    );
  }

  _dart_gp_camera_stop_timeout _gp_camera_stop_timeout;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    ___va_start ??=
        _dylib.lookupFunction<_c___va_start, _dart___va_start>('__va_start');
    return ___va_start(
      arg0,
    );
  }

  _dart___va_start ___va_start;

  void __security_init_cookie() {
    ___security_init_cookie ??= _dylib.lookupFunction<_c___security_init_cookie,
        _dart___security_init_cookie>('__security_init_cookie');
    return ___security_init_cookie();
  }

  _dart___security_init_cookie ___security_init_cookie;

  void __security_check_cookie(
    int _StackCookie,
  ) {
    ___security_check_cookie ??= _dylib.lookupFunction<
        _c___security_check_cookie,
        _dart___security_check_cookie>('__security_check_cookie');
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  _dart___security_check_cookie ___security_check_cookie;

  void __report_gsfailure(
    int _StackCookie,
  ) {
    ___report_gsfailure ??=
        _dylib.lookupFunction<_c___report_gsfailure, _dart___report_gsfailure>(
            '__report_gsfailure');
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  _dart___report_gsfailure ___report_gsfailure;

  ffi.Pointer<_GPContext> gp_context_new() {
    _gp_context_new ??=
        _dylib.lookupFunction<_c_gp_context_new, _dart_gp_context_new>(
            'gp_context_new');
    return _gp_context_new();
  }

  _dart_gp_context_new _gp_context_new;

  void gp_context_ref(
    ffi.Pointer<_GPContext> context,
  ) {
    _gp_context_ref ??=
        _dylib.lookupFunction<_c_gp_context_ref, _dart_gp_context_ref>(
            'gp_context_ref');
    return _gp_context_ref(
      context,
    );
  }

  _dart_gp_context_ref _gp_context_ref;

  void gp_context_unref(
    ffi.Pointer<_GPContext> context,
  ) {
    _gp_context_unref ??=
        _dylib.lookupFunction<_c_gp_context_unref, _dart_gp_context_unref>(
            'gp_context_unref');
    return _gp_context_unref(
      context,
    );
  }

  _dart_gp_context_unref _gp_context_unref;

  void gp_context_set_idle_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextIdleFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_idle_func ??= _dylib.lookupFunction<
        _c_gp_context_set_idle_func,
        _dart_gp_context_set_idle_func>('gp_context_set_idle_func');
    return _gp_context_set_idle_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_idle_func _gp_context_set_idle_func;

  void gp_context_set_progress_funcs(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextProgressStartFunc>> start_func,
    ffi.Pointer<ffi.NativeFunction<GPContextProgressUpdateFunc>> update_func,
    ffi.Pointer<ffi.NativeFunction<GPContextProgressStopFunc>> stop_func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_progress_funcs ??= _dylib.lookupFunction<
        _c_gp_context_set_progress_funcs,
        _dart_gp_context_set_progress_funcs>('gp_context_set_progress_funcs');
    return _gp_context_set_progress_funcs(
      context,
      start_func,
      update_func,
      stop_func,
      data,
    );
  }

  _dart_gp_context_set_progress_funcs _gp_context_set_progress_funcs;

  void gp_context_set_error_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextErrorFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_error_func ??= _dylib.lookupFunction<
        _c_gp_context_set_error_func,
        _dart_gp_context_set_error_func>('gp_context_set_error_func');
    return _gp_context_set_error_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_error_func _gp_context_set_error_func;

  void gp_context_set_status_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextStatusFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_status_func ??= _dylib.lookupFunction<
        _c_gp_context_set_status_func,
        _dart_gp_context_set_status_func>('gp_context_set_status_func');
    return _gp_context_set_status_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_status_func _gp_context_set_status_func;

  void gp_context_set_question_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextQuestionFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_question_func ??= _dylib.lookupFunction<
        _c_gp_context_set_question_func,
        _dart_gp_context_set_question_func>('gp_context_set_question_func');
    return _gp_context_set_question_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_question_func _gp_context_set_question_func;

  void gp_context_set_cancel_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextCancelFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_cancel_func ??= _dylib.lookupFunction<
        _c_gp_context_set_cancel_func,
        _dart_gp_context_set_cancel_func>('gp_context_set_cancel_func');
    return _gp_context_set_cancel_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_cancel_func _gp_context_set_cancel_func;

  void gp_context_set_message_func(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.NativeFunction<GPContextMessageFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_context_set_message_func ??= _dylib.lookupFunction<
        _c_gp_context_set_message_func,
        _dart_gp_context_set_message_func>('gp_context_set_message_func');
    return _gp_context_set_message_func(
      context,
      func,
      data,
    );
  }

  _dart_gp_context_set_message_func _gp_context_set_message_func;

  void gp_context_idle(
    ffi.Pointer<_GPContext> context,
  ) {
    _gp_context_idle ??=
        _dylib.lookupFunction<_c_gp_context_idle, _dart_gp_context_idle>(
            'gp_context_idle');
    return _gp_context_idle(
      context,
    );
  }

  _dart_gp_context_idle _gp_context_idle;

  void gp_context_error(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_context_error ??=
        _dylib.lookupFunction<_c_gp_context_error, _dart_gp_context_error>(
            'gp_context_error');
    return _gp_context_error(
      context,
      format,
    );
  }

  _dart_gp_context_error _gp_context_error;

  void gp_context_status(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_context_status ??=
        _dylib.lookupFunction<_c_gp_context_status, _dart_gp_context_status>(
            'gp_context_status');
    return _gp_context_status(
      context,
      format,
    );
  }

  _dart_gp_context_status _gp_context_status;

  void gp_context_message(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_context_message ??=
        _dylib.lookupFunction<_c_gp_context_message, _dart_gp_context_message>(
            'gp_context_message');
    return _gp_context_message(
      context,
      format,
    );
  }

  _dart_gp_context_message _gp_context_message;

  int gp_context_question(
    ffi.Pointer<_GPContext> context,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_context_question ??= _dylib.lookupFunction<_c_gp_context_question,
        _dart_gp_context_question>('gp_context_question');
    return _gp_context_question(
      context,
      format,
    );
  }

  _dart_gp_context_question _gp_context_question;

  int gp_context_cancel(
    ffi.Pointer<_GPContext> context,
  ) {
    _gp_context_cancel ??=
        _dylib.lookupFunction<_c_gp_context_cancel, _dart_gp_context_cancel>(
            'gp_context_cancel');
    return _gp_context_cancel(
      context,
    );
  }

  _dart_gp_context_cancel _gp_context_cancel;

  int gp_context_progress_start(
    ffi.Pointer<_GPContext> context,
    double target,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_context_progress_start ??= _dylib.lookupFunction<
        _c_gp_context_progress_start,
        _dart_gp_context_progress_start>('gp_context_progress_start');
    return _gp_context_progress_start(
      context,
      target,
      format,
    );
  }

  _dart_gp_context_progress_start _gp_context_progress_start;

  void gp_context_progress_update(
    ffi.Pointer<_GPContext> context,
    int id,
    double current,
  ) {
    _gp_context_progress_update ??= _dylib.lookupFunction<
        _c_gp_context_progress_update,
        _dart_gp_context_progress_update>('gp_context_progress_update');
    return _gp_context_progress_update(
      context,
      id,
      current,
    );
  }

  _dart_gp_context_progress_update _gp_context_progress_update;

  void gp_context_progress_stop(
    ffi.Pointer<_GPContext> context,
    int id,
  ) {
    _gp_context_progress_stop ??= _dylib.lookupFunction<
        _c_gp_context_progress_stop,
        _dart_gp_context_progress_stop>('gp_context_progress_stop');
    return _gp_context_progress_stop(
      context,
      id,
    );
  }

  _dart_gp_context_progress_stop _gp_context_progress_stop;

  void _invalid_parameter_noinfo() {
    __invalid_parameter_noinfo ??= _dylib.lookupFunction<
        _c__invalid_parameter_noinfo,
        _dart__invalid_parameter_noinfo>('_invalid_parameter_noinfo');
    return __invalid_parameter_noinfo();
  }

  _dart__invalid_parameter_noinfo __invalid_parameter_noinfo;

  void _invalid_parameter_noinfo_noreturn() {
    __invalid_parameter_noinfo_noreturn ??= _dylib.lookupFunction<
            _c__invalid_parameter_noinfo_noreturn,
            _dart__invalid_parameter_noinfo_noreturn>(
        '_invalid_parameter_noinfo_noreturn');
    return __invalid_parameter_noinfo_noreturn();
  }

  _dart__invalid_parameter_noinfo_noreturn __invalid_parameter_noinfo_noreturn;

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    __invoke_watson ??=
        _dylib.lookupFunction<_c__invoke_watson, _dart__invoke_watson>(
            '_invoke_watson');
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  _dart__invoke_watson __invoke_watson;

  ffi.Pointer<ffi.Uint16> _wasctime(
    ffi.Pointer<tm> _Tm,
  ) {
    __wasctime ??=
        _dylib.lookupFunction<_c__wasctime, _dart__wasctime>('_wasctime');
    return __wasctime(
      _Tm,
    );
  }

  _dart__wasctime __wasctime;

  int _wasctime_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    __wasctime_s ??=
        _dylib.lookupFunction<_c__wasctime_s, _dart__wasctime_s>('_wasctime_s');
    return __wasctime_s(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  _dart__wasctime_s __wasctime_s;

  int wcsftime(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    _wcsftime ??=
        _dylib.lookupFunction<_c_wcsftime, _dart_wcsftime>('wcsftime');
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  _dart_wcsftime _wcsftime;

  int _wcsftime_l(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Format,
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    __wcsftime_l ??=
        _dylib.lookupFunction<_c__wcsftime_l, _dart__wcsftime_l>('_wcsftime_l');
    return __wcsftime_l(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  _dart__wcsftime_l __wcsftime_l;

  ffi.Pointer<ffi.Uint16> _wctime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime32 ??=
        _dylib.lookupFunction<_c__wctime32, _dart__wctime32>('_wctime32');
    return __wctime32(
      _Time,
    );
  }

  _dart__wctime32 __wctime32;

  int _wctime32_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime32_s ??=
        _dylib.lookupFunction<_c__wctime32_s, _dart__wctime32_s>('_wctime32_s');
    return __wctime32_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  _dart__wctime32_s __wctime32_s;

  ffi.Pointer<ffi.Uint16> _wctime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime64 ??=
        _dylib.lookupFunction<_c__wctime64, _dart__wctime64>('_wctime64');
    return __wctime64(
      _Time,
    );
  }

  _dart__wctime64 __wctime64;

  int _wctime64_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime64_s ??=
        _dylib.lookupFunction<_c__wctime64_s, _dart__wctime64_s>('_wctime64_s');
    return __wctime64_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  _dart__wctime64_s __wctime64_s;

  int _wstrdate_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
  ) {
    __wstrdate_s ??=
        _dylib.lookupFunction<_c__wstrdate_s, _dart__wstrdate_s>('_wstrdate_s');
    return __wstrdate_s(
      _Buffer,
      _SizeInWords,
    );
  }

  _dart__wstrdate_s __wstrdate_s;

  ffi.Pointer<ffi.Uint16> _wstrdate(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    __wstrdate ??=
        _dylib.lookupFunction<_c__wstrdate, _dart__wstrdate>('_wstrdate');
    return __wstrdate(
      _Buffer,
    );
  }

  _dart__wstrdate __wstrdate;

  int _wstrtime_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
  ) {
    __wstrtime_s ??=
        _dylib.lookupFunction<_c__wstrtime_s, _dart__wstrtime_s>('_wstrtime_s');
    return __wstrtime_s(
      _Buffer,
      _SizeInWords,
    );
  }

  _dart__wstrtime_s __wstrtime_s;

  ffi.Pointer<ffi.Uint16> _wstrtime(
    ffi.Pointer<ffi.Uint16> _Buffer,
  ) {
    __wstrtime ??=
        _dylib.lookupFunction<_c__wstrtime, _dart__wstrtime>('_wstrtime');
    return __wstrtime(
      _Buffer,
    );
  }

  _dart__wstrtime __wstrtime;

  ffi.Pointer<ffi.Uint16> _wctime(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime ??= _dylib.lookupFunction<_c__wctime, _dart__wctime>('_wctime');
    return __wctime(
      _Time,
    );
  }

  _dart__wctime __wctime;

  int _wctime_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __wctime_s ??=
        _dylib.lookupFunction<_c__wctime_s, _dart__wctime_s>('_wctime_s');
    return __wctime_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  _dart__wctime_s __wctime_s;

  ffi.Pointer<ffi.Int32> __daylight() {
    ___daylight ??=
        _dylib.lookupFunction<_c___daylight, _dart___daylight>('__daylight');
    return ___daylight();
  }

  _dart___daylight ___daylight;

  ffi.Pointer<ffi.Int64> __dstbias() {
    ___dstbias ??=
        _dylib.lookupFunction<_c___dstbias, _dart___dstbias>('__dstbias');
    return ___dstbias();
  }

  _dart___dstbias ___dstbias;

  ffi.Pointer<ffi.Int64> __timezone() {
    ___timezone ??=
        _dylib.lookupFunction<_c___timezone, _dart___timezone>('__timezone');
    return ___timezone();
  }

  _dart___timezone ___timezone;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tzname() {
    ___tzname ??=
        _dylib.lookupFunction<_c___tzname, _dart___tzname>('__tzname');
    return ___tzname();
  }

  _dart___tzname ___tzname;

  int _get_daylight(
    ffi.Pointer<ffi.Int32> _Daylight,
  ) {
    __get_daylight ??= _dylib
        .lookupFunction<_c__get_daylight, _dart__get_daylight>('_get_daylight');
    return __get_daylight(
      _Daylight,
    );
  }

  _dart__get_daylight __get_daylight;

  int _get_dstbias(
    ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
  ) {
    __get_dstbias ??= _dylib
        .lookupFunction<_c__get_dstbias, _dart__get_dstbias>('_get_dstbias');
    return __get_dstbias(
      _DaylightSavingsBias,
    );
  }

  _dart__get_dstbias __get_dstbias;

  int _get_timezone(
    ffi.Pointer<ffi.Int64> _TimeZone,
  ) {
    __get_timezone ??= _dylib
        .lookupFunction<_c__get_timezone, _dart__get_timezone>('_get_timezone');
    return __get_timezone(
      _TimeZone,
    );
  }

  _dart__get_timezone __get_timezone;

  int _get_tzname(
    ffi.Pointer<ffi.Uint64> _ReturnValue,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _Index,
  ) {
    __get_tzname ??=
        _dylib.lookupFunction<_c__get_tzname, _dart__get_tzname>('_get_tzname');
    return __get_tzname(
      _ReturnValue,
      _Buffer,
      _SizeInBytes,
      _Index,
    );
  }

  _dart__get_tzname __get_tzname;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> _Tm,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      _Tm,
    );
  }

  _dart_asctime _asctime;

  int asctime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<tm> _Tm,
  ) {
    _asctime_s ??=
        _dylib.lookupFunction<_c_asctime_s, _dart_asctime_s>('asctime_s');
    return _asctime_s(
      _Buffer,
      _SizeInBytes,
      _Tm,
    );
  }

  _dart_asctime_s _asctime_s;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  ffi.Pointer<ffi.Int8> _ctime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __ctime32 ??=
        _dylib.lookupFunction<_c__ctime32, _dart__ctime32>('_ctime32');
    return __ctime32(
      _Time,
    );
  }

  _dart__ctime32 __ctime32;

  int _ctime32_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __ctime32_s ??=
        _dylib.lookupFunction<_c__ctime32_s, _dart__ctime32_s>('_ctime32_s');
    return __ctime32_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  _dart__ctime32_s __ctime32_s;

  ffi.Pointer<ffi.Int8> _ctime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __ctime64 ??=
        _dylib.lookupFunction<_c__ctime64, _dart__ctime64>('_ctime64');
    return __ctime64(
      _Time,
    );
  }

  _dart__ctime64 __ctime64;

  int _ctime64_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __ctime64_s ??=
        _dylib.lookupFunction<_c__ctime64_s, _dart__ctime64_s>('_ctime64_s');
    return __ctime64_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  _dart__ctime64_s __ctime64_s;

  double _difftime32(
    int _Time1,
    int _Time2,
  ) {
    __difftime32 ??=
        _dylib.lookupFunction<_c__difftime32, _dart__difftime32>('_difftime32');
    return __difftime32(
      _Time1,
      _Time2,
    );
  }

  _dart__difftime32 __difftime32;

  double _difftime64(
    int _Time1,
    int _Time2,
  ) {
    __difftime64 ??=
        _dylib.lookupFunction<_c__difftime64, _dart__difftime64>('_difftime64');
    return __difftime64(
      _Time1,
      _Time2,
    );
  }

  _dart__difftime64 __difftime64;

  ffi.Pointer<tm> _gmtime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __gmtime32 ??=
        _dylib.lookupFunction<_c__gmtime32, _dart__gmtime32>('_gmtime32');
    return __gmtime32(
      _Time,
    );
  }

  _dart__gmtime32 __gmtime32;

  int _gmtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __gmtime32_s ??=
        _dylib.lookupFunction<_c__gmtime32_s, _dart__gmtime32_s>('_gmtime32_s');
    return __gmtime32_s(
      _Tm,
      _Time,
    );
  }

  _dart__gmtime32_s __gmtime32_s;

  ffi.Pointer<tm> _gmtime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __gmtime64 ??=
        _dylib.lookupFunction<_c__gmtime64, _dart__gmtime64>('_gmtime64');
    return __gmtime64(
      _Time,
    );
  }

  _dart__gmtime64 __gmtime64;

  int _gmtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __gmtime64_s ??=
        _dylib.lookupFunction<_c__gmtime64_s, _dart__gmtime64_s>('_gmtime64_s');
    return __gmtime64_s(
      _Tm,
      _Time,
    );
  }

  _dart__gmtime64_s __gmtime64_s;

  ffi.Pointer<tm> _localtime32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __localtime32 ??= _dylib
        .lookupFunction<_c__localtime32, _dart__localtime32>('_localtime32');
    return __localtime32(
      _Time,
    );
  }

  _dart__localtime32 __localtime32;

  int _localtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __localtime32_s ??=
        _dylib.lookupFunction<_c__localtime32_s, _dart__localtime32_s>(
            '_localtime32_s');
    return __localtime32_s(
      _Tm,
      _Time,
    );
  }

  _dart__localtime32_s __localtime32_s;

  ffi.Pointer<tm> _localtime64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __localtime64 ??= _dylib
        .lookupFunction<_c__localtime64, _dart__localtime64>('_localtime64');
    return __localtime64(
      _Time,
    );
  }

  _dart__localtime64 __localtime64;

  int _localtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __localtime64_s ??=
        _dylib.lookupFunction<_c__localtime64_s, _dart__localtime64_s>(
            '_localtime64_s');
    return __localtime64_s(
      _Tm,
      _Time,
    );
  }

  _dart__localtime64_s __localtime64_s;

  int _mkgmtime32(
    ffi.Pointer<tm> _Tm,
  ) {
    __mkgmtime32 ??=
        _dylib.lookupFunction<_c__mkgmtime32, _dart__mkgmtime32>('_mkgmtime32');
    return __mkgmtime32(
      _Tm,
    );
  }

  _dart__mkgmtime32 __mkgmtime32;

  int _mkgmtime64(
    ffi.Pointer<tm> _Tm,
  ) {
    __mkgmtime64 ??=
        _dylib.lookupFunction<_c__mkgmtime64, _dart__mkgmtime64>('_mkgmtime64');
    return __mkgmtime64(
      _Tm,
    );
  }

  _dart__mkgmtime64 __mkgmtime64;

  int _mktime32(
    ffi.Pointer<tm> _Tm,
  ) {
    __mktime32 ??=
        _dylib.lookupFunction<_c__mktime32, _dart__mktime32>('_mktime32');
    return __mktime32(
      _Tm,
    );
  }

  _dart__mktime32 __mktime32;

  int _mktime64(
    ffi.Pointer<tm> _Tm,
  ) {
    __mktime64 ??=
        _dylib.lookupFunction<_c__mktime64, _dart__mktime64>('_mktime64');
    return __mktime64(
      _Tm,
    );
  }

  _dart__mktime64 __mktime64;

  int strftime(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      _Buffer,
      _SizeInBytes,
      _Format,
      _Tm,
    );
  }

  _dart_strftime _strftime;

  int _strftime_l(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxSize,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    __strftime_l ??=
        _dylib.lookupFunction<_c__strftime_l, _dart__strftime_l>('_strftime_l');
    return __strftime_l(
      _Buffer,
      _MaxSize,
      _Format,
      _Tm,
      _Locale,
    );
  }

  _dart__strftime_l __strftime_l;

  int _strdate_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    __strdate_s ??=
        _dylib.lookupFunction<_c__strdate_s, _dart__strdate_s>('_strdate_s');
    return __strdate_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  _dart__strdate_s __strdate_s;

  ffi.Pointer<ffi.Int8> _strdate(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    __strdate ??=
        _dylib.lookupFunction<_c__strdate, _dart__strdate>('_strdate');
    return __strdate(
      _Buffer,
    );
  }

  _dart__strdate __strdate;

  int _strtime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    __strtime_s ??=
        _dylib.lookupFunction<_c__strtime_s, _dart__strtime_s>('_strtime_s');
    return __strtime_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  _dart__strtime_s __strtime_s;

  ffi.Pointer<ffi.Int8> _strtime(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    __strtime ??=
        _dylib.lookupFunction<_c__strtime, _dart__strtime>('_strtime');
    return __strtime(
      _Buffer,
    );
  }

  _dart__strtime __strtime;

  int _time32(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __time32 ??= _dylib.lookupFunction<_c__time32, _dart__time32>('_time32');
    return __time32(
      _Time,
    );
  }

  _dart__time32 __time32;

  int _time64(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    __time64 ??= _dylib.lookupFunction<_c__time64, _dart__time64>('_time64');
    return __time64(
      _Time,
    );
  }

  _dart__time64 __time64;

  int _timespec32_get(
    ffi.Pointer<_timespec32> _Ts,
    int _Base,
  ) {
    __timespec32_get ??=
        _dylib.lookupFunction<_c__timespec32_get, _dart__timespec32_get>(
            '_timespec32_get');
    return __timespec32_get(
      _Ts,
      _Base,
    );
  }

  _dart__timespec32_get __timespec32_get;

  int _timespec64_get(
    ffi.Pointer<_timespec64> _Ts,
    int _Base,
  ) {
    __timespec64_get ??=
        _dylib.lookupFunction<_c__timespec64_get, _dart__timespec64_get>(
            '_timespec64_get');
    return __timespec64_get(
      _Ts,
      _Base,
    );
  }

  _dart__timespec64_get __timespec64_get;

  void _tzset() {
    __tzset ??= _dylib.lookupFunction<_c__tzset, _dart__tzset>('_tzset');
    return __tzset();
  }

  _dart__tzset __tzset;

  int _getsystime(
    ffi.Pointer<tm> _Tm,
  ) {
    __getsystime ??=
        _dylib.lookupFunction<_c__getsystime, _dart__getsystime>('_getsystime');
    return __getsystime(
      _Tm,
    );
  }

  _dart__getsystime __getsystime;

  int _setsystime(
    ffi.Pointer<tm> _Tm,
    int _Milliseconds,
  ) {
    __setsystime ??=
        _dylib.lookupFunction<_c__setsystime, _dart__setsystime>('_setsystime');
    return __setsystime(
      _Tm,
      _Milliseconds,
    );
  }

  _dart__setsystime __setsystime;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      _Time,
    );
  }

  _dart_ctime _ctime;

  double difftime(
    int _Time1,
    int _Time2,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      _Time1,
      _Time2,
    );
  }

  _dart_difftime _difftime;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      _Time,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      _Time,
    );
  }

  _dart_localtime _localtime;

  int _mkgmtime(
    ffi.Pointer<tm> _Tm,
  ) {
    __mkgmtime ??=
        _dylib.lookupFunction<_c__mkgmtime, _dart__mkgmtime>('_mkgmtime');
    return __mkgmtime(
      _Tm,
    );
  }

  _dart__mkgmtime __mkgmtime;

  int mktime(
    ffi.Pointer<tm> _Tm,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      _Tm,
    );
  }

  _dart_mktime _mktime;

  int time(
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      _Time,
    );
  }

  _dart_time _time;

  int timespec_get(
    ffi.Pointer<timespec> _Ts,
    int _Base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      _Ts,
      _Base,
    );
  }

  _dart_timespec_get _timespec_get;

  int ctime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _ctime_s ??= _dylib.lookupFunction<_c_ctime_s, _dart_ctime_s>('ctime_s');
    return _ctime_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  _dart_ctime_s _ctime_s;

  int gmtime_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _gmtime_s ??=
        _dylib.lookupFunction<_c_gmtime_s, _dart_gmtime_s>('gmtime_s');
    return _gmtime_s(
      _Tm,
      _Time,
    );
  }

  _dart_gmtime_s _gmtime_s;

  int localtime_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<ffi.Int64> _Time,
  ) {
    _localtime_s ??=
        _dylib.lookupFunction<_c_localtime_s, _dart_localtime_s>('localtime_s');
    return _localtime_s(
      _Tm,
      _Time,
    );
  }

  _dart_localtime_s _localtime_s;

  void tzset() {
    _tzset_1 ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset_1();
  }

  _dart_tzset _tzset_1;

  int gp_file_new(
    ffi.Pointer<ffi.Pointer<_CameraFile>> file,
  ) {
    _gp_file_new ??=
        _dylib.lookupFunction<_c_gp_file_new, _dart_gp_file_new>('gp_file_new');
    return _gp_file_new(
      file,
    );
  }

  _dart_gp_file_new _gp_file_new;

  int gp_file_new_from_fd(
    ffi.Pointer<ffi.Pointer<_CameraFile>> file,
    int fd,
  ) {
    _gp_file_new_from_fd ??= _dylib.lookupFunction<_c_gp_file_new_from_fd,
        _dart_gp_file_new_from_fd>('gp_file_new_from_fd');
    return _gp_file_new_from_fd(
      file,
      fd,
    );
  }

  _dart_gp_file_new_from_fd _gp_file_new_from_fd;

  int gp_file_new_from_handler(
    ffi.Pointer<ffi.Pointer<_CameraFile>> file,
    ffi.Pointer<CameraFileHandler> handler,
    ffi.Pointer<ffi.Void> priv,
  ) {
    _gp_file_new_from_handler ??= _dylib.lookupFunction<
        _c_gp_file_new_from_handler,
        _dart_gp_file_new_from_handler>('gp_file_new_from_handler');
    return _gp_file_new_from_handler(
      file,
      handler,
      priv,
    );
  }

  _dart_gp_file_new_from_handler _gp_file_new_from_handler;

  int gp_file_ref(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_ref ??=
        _dylib.lookupFunction<_c_gp_file_ref, _dart_gp_file_ref>('gp_file_ref');
    return _gp_file_ref(
      file,
    );
  }

  _dart_gp_file_ref _gp_file_ref;

  int gp_file_unref(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_unref ??= _dylib
        .lookupFunction<_c_gp_file_unref, _dart_gp_file_unref>('gp_file_unref');
    return _gp_file_unref(
      file,
    );
  }

  _dart_gp_file_unref _gp_file_unref;

  int gp_file_free(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_free ??= _dylib
        .lookupFunction<_c_gp_file_free, _dart_gp_file_free>('gp_file_free');
    return _gp_file_free(
      file,
    );
  }

  _dart_gp_file_free _gp_file_free;

  int gp_file_set_name(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_file_set_name ??=
        _dylib.lookupFunction<_c_gp_file_set_name, _dart_gp_file_set_name>(
            'gp_file_set_name');
    return _gp_file_set_name(
      file,
      name,
    );
  }

  _dart_gp_file_set_name _gp_file_set_name;

  int gp_file_get_name(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    _gp_file_get_name ??=
        _dylib.lookupFunction<_c_gp_file_get_name, _dart_gp_file_get_name>(
            'gp_file_get_name');
    return _gp_file_get_name(
      file,
      name,
    );
  }

  _dart_gp_file_get_name _gp_file_get_name;

  int gp_file_set_mime_type(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int8> mime_type,
  ) {
    _gp_file_set_mime_type ??= _dylib.lookupFunction<_c_gp_file_set_mime_type,
        _dart_gp_file_set_mime_type>('gp_file_set_mime_type');
    return _gp_file_set_mime_type(
      file,
      mime_type,
    );
  }

  _dart_gp_file_set_mime_type _gp_file_set_mime_type;

  int gp_file_get_mime_type(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> mime_type,
  ) {
    _gp_file_get_mime_type ??= _dylib.lookupFunction<_c_gp_file_get_mime_type,
        _dart_gp_file_get_mime_type>('gp_file_get_mime_type');
    return _gp_file_get_mime_type(
      file,
      mime_type,
    );
  }

  _dart_gp_file_get_mime_type _gp_file_get_mime_type;

  int gp_file_set_mtime(
    ffi.Pointer<_CameraFile> file,
    int mtime,
  ) {
    _gp_file_set_mtime ??=
        _dylib.lookupFunction<_c_gp_file_set_mtime, _dart_gp_file_set_mtime>(
            'gp_file_set_mtime');
    return _gp_file_set_mtime(
      file,
      mtime,
    );
  }

  _dart_gp_file_set_mtime _gp_file_set_mtime;

  int gp_file_get_mtime(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int64> mtime,
  ) {
    _gp_file_get_mtime ??=
        _dylib.lookupFunction<_c_gp_file_get_mtime, _dart_gp_file_get_mtime>(
            'gp_file_get_mtime');
    return _gp_file_get_mtime(
      file,
      mtime,
    );
  }

  _dart_gp_file_get_mtime _gp_file_get_mtime;

  int gp_file_detect_mime_type(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_detect_mime_type ??= _dylib.lookupFunction<
        _c_gp_file_detect_mime_type,
        _dart_gp_file_detect_mime_type>('gp_file_detect_mime_type');
    return _gp_file_detect_mime_type(
      file,
    );
  }

  _dart_gp_file_detect_mime_type _gp_file_detect_mime_type;

  int gp_file_adjust_name_for_mime_type(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_adjust_name_for_mime_type ??= _dylib.lookupFunction<
            _c_gp_file_adjust_name_for_mime_type,
            _dart_gp_file_adjust_name_for_mime_type>(
        'gp_file_adjust_name_for_mime_type');
    return _gp_file_adjust_name_for_mime_type(
      file,
    );
  }

  _dart_gp_file_adjust_name_for_mime_type _gp_file_adjust_name_for_mime_type;

  int gp_file_get_name_by_type(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int8> basename,
    int type,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> newname,
  ) {
    _gp_file_get_name_by_type ??= _dylib.lookupFunction<
        _c_gp_file_get_name_by_type,
        _dart_gp_file_get_name_by_type>('gp_file_get_name_by_type');
    return _gp_file_get_name_by_type(
      file,
      basename,
      type,
      newname,
    );
  }

  _dart_gp_file_get_name_by_type _gp_file_get_name_by_type;

  int gp_file_set_data_and_size(
    ffi.Pointer<_CameraFile> arg0,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_file_set_data_and_size ??= _dylib.lookupFunction<
        _c_gp_file_set_data_and_size,
        _dart_gp_file_set_data_and_size>('gp_file_set_data_and_size');
    return _gp_file_set_data_and_size(
      arg0,
      data,
      size,
    );
  }

  _dart_gp_file_set_data_and_size _gp_file_set_data_and_size;

  int gp_file_get_data_and_size(
    ffi.Pointer<_CameraFile> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> data,
    ffi.Pointer<ffi.Uint64> size,
  ) {
    _gp_file_get_data_and_size ??= _dylib.lookupFunction<
        _c_gp_file_get_data_and_size,
        _dart_gp_file_get_data_and_size>('gp_file_get_data_and_size');
    return _gp_file_get_data_and_size(
      arg0,
      data,
      size,
    );
  }

  _dart_gp_file_get_data_and_size _gp_file_get_data_and_size;

  int gp_file_open(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _gp_file_open ??= _dylib
        .lookupFunction<_c_gp_file_open, _dart_gp_file_open>('gp_file_open');
    return _gp_file_open(
      file,
      filename,
    );
  }

  _dart_gp_file_open _gp_file_open;

  int gp_file_save(
    ffi.Pointer<_CameraFile> file,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _gp_file_save ??= _dylib
        .lookupFunction<_c_gp_file_save, _dart_gp_file_save>('gp_file_save');
    return _gp_file_save(
      file,
      filename,
    );
  }

  _dart_gp_file_save _gp_file_save;

  int gp_file_clean(
    ffi.Pointer<_CameraFile> file,
  ) {
    _gp_file_clean ??= _dylib
        .lookupFunction<_c_gp_file_clean, _dart_gp_file_clean>('gp_file_clean');
    return _gp_file_clean(
      file,
    );
  }

  _dart_gp_file_clean _gp_file_clean;

  int gp_file_copy(
    ffi.Pointer<_CameraFile> destination,
    ffi.Pointer<_CameraFile> source,
  ) {
    _gp_file_copy ??= _dylib
        .lookupFunction<_c_gp_file_copy, _dart_gp_file_copy>('gp_file_copy');
    return _gp_file_copy(
      destination,
      source,
    );
  }

  _dart_gp_file_copy _gp_file_copy;

  int gp_file_append(
    ffi.Pointer<_CameraFile> arg0,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_file_append ??=
        _dylib.lookupFunction<_c_gp_file_append, _dart_gp_file_append>(
            'gp_file_append');
    return _gp_file_append(
      arg0,
      data,
      size,
    );
  }

  _dart_gp_file_append _gp_file_append;

  int gp_file_slurp(
    ffi.Pointer<_CameraFile> arg0,
    ffi.Pointer<ffi.Int8> data,
    int size,
    ffi.Pointer<ffi.Uint64> readlen,
  ) {
    _gp_file_slurp ??= _dylib
        .lookupFunction<_c_gp_file_slurp, _dart_gp_file_slurp>('gp_file_slurp');
    return _gp_file_slurp(
      arg0,
      data,
      size,
      readlen,
    );
  }

  _dart_gp_file_slurp _gp_file_slurp;

  int gp_filesystem_new(
    ffi.Pointer<ffi.Pointer<_CameraFilesystem>> fs,
  ) {
    _gp_filesystem_new ??=
        _dylib.lookupFunction<_c_gp_filesystem_new, _dart_gp_filesystem_new>(
            'gp_filesystem_new');
    return _gp_filesystem_new(
      fs,
    );
  }

  _dart_gp_filesystem_new _gp_filesystem_new;

  int gp_filesystem_free(
    ffi.Pointer<_CameraFilesystem> fs,
  ) {
    _gp_filesystem_free ??=
        _dylib.lookupFunction<_c_gp_filesystem_free, _dart_gp_filesystem_free>(
            'gp_filesystem_free');
    return _gp_filesystem_free(
      fs,
    );
  }

  _dart_gp_filesystem_free _gp_filesystem_free;

  int gp_filesystem_append(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_append ??= _dylib.lookupFunction<_c_gp_filesystem_append,
        _dart_gp_filesystem_append>('gp_filesystem_append');
    return _gp_filesystem_append(
      fs,
      folder,
      filename,
      context,
    );
  }

  _dart_gp_filesystem_append _gp_filesystem_append;

  int gp_filesystem_set_file_noop(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    int type,
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_set_file_noop ??= _dylib.lookupFunction<
        _c_gp_filesystem_set_file_noop,
        _dart_gp_filesystem_set_file_noop>('gp_filesystem_set_file_noop');
    return _gp_filesystem_set_file_noop(
      fs,
      folder,
      filename,
      type,
      file,
      context,
    );
  }

  _dart_gp_filesystem_set_file_noop _gp_filesystem_set_file_noop;

  int gp_filesystem_delete_file_noop(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_delete_file_noop ??= _dylib.lookupFunction<
        _c_gp_filesystem_delete_file_noop,
        _dart_gp_filesystem_delete_file_noop>('gp_filesystem_delete_file_noop');
    return _gp_filesystem_delete_file_noop(
      fs,
      folder,
      filename,
      context,
    );
  }

  _dart_gp_filesystem_delete_file_noop _gp_filesystem_delete_file_noop;

  int gp_filesystem_reset(
    ffi.Pointer<_CameraFilesystem> fs,
  ) {
    _gp_filesystem_reset ??= _dylib.lookupFunction<_c_gp_filesystem_reset,
        _dart_gp_filesystem_reset>('gp_filesystem_reset');
    return _gp_filesystem_reset(
      fs,
    );
  }

  _dart_gp_filesystem_reset _gp_filesystem_reset;

  int gp_filesystem_count(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_count ??= _dylib.lookupFunction<_c_gp_filesystem_count,
        _dart_gp_filesystem_count>('gp_filesystem_count');
    return _gp_filesystem_count(
      fs,
      folder,
      context,
    );
  }

  _dart_gp_filesystem_count _gp_filesystem_count;

  int gp_filesystem_name(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    int filenumber,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> filename,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_name ??=
        _dylib.lookupFunction<_c_gp_filesystem_name, _dart_gp_filesystem_name>(
            'gp_filesystem_name');
    return _gp_filesystem_name(
      fs,
      folder,
      filenumber,
      filename,
      context,
    );
  }

  _dart_gp_filesystem_name _gp_filesystem_name;

  int gp_filesystem_get_folder(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> folder,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_get_folder ??= _dylib.lookupFunction<
        _c_gp_filesystem_get_folder,
        _dart_gp_filesystem_get_folder>('gp_filesystem_get_folder');
    return _gp_filesystem_get_folder(
      fs,
      filename,
      folder,
      context,
    );
  }

  _dart_gp_filesystem_get_folder _gp_filesystem_get_folder;

  int gp_filesystem_number(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_number ??= _dylib.lookupFunction<_c_gp_filesystem_number,
        _dart_gp_filesystem_number>('gp_filesystem_number');
    return _gp_filesystem_number(
      fs,
      folder,
      filename,
      context,
    );
  }

  _dart_gp_filesystem_number _gp_filesystem_number;

  int gp_filesystem_list_files(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_list_files ??= _dylib.lookupFunction<
        _c_gp_filesystem_list_files,
        _dart_gp_filesystem_list_files>('gp_filesystem_list_files');
    return _gp_filesystem_list_files(
      fs,
      folder,
      list,
      context,
    );
  }

  _dart_gp_filesystem_list_files _gp_filesystem_list_files;

  int gp_filesystem_list_folders(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> list,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_list_folders ??= _dylib.lookupFunction<
        _c_gp_filesystem_list_folders,
        _dart_gp_filesystem_list_folders>('gp_filesystem_list_folders');
    return _gp_filesystem_list_folders(
      fs,
      folder,
      list,
      context,
    );
  }

  _dart_gp_filesystem_list_folders _gp_filesystem_list_folders;

  int gp_filesystem_get_info(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<CameraFileInfo> info,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_get_info ??= _dylib.lookupFunction<_c_gp_filesystem_get_info,
        _dart_gp_filesystem_get_info>('gp_filesystem_get_info');
    return _gp_filesystem_get_info(
      fs,
      folder,
      filename,
      info,
      context,
    );
  }

  _dart_gp_filesystem_get_info _gp_filesystem_get_info;

  int gp_filesystem_get_file(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    int type,
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_get_file ??= _dylib.lookupFunction<_c_gp_filesystem_get_file,
        _dart_gp_filesystem_get_file>('gp_filesystem_get_file');
    return _gp_filesystem_get_file(
      fs,
      folder,
      filename,
      type,
      file,
      context,
    );
  }

  _dart_gp_filesystem_get_file _gp_filesystem_get_file;

  int gp_filesystem_read_file(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    int type,
    int offset,
    ffi.Pointer<ffi.Int8> buf,
    ffi.Pointer<ffi.Uint64> size,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_read_file ??= _dylib.lookupFunction<
        _c_gp_filesystem_read_file,
        _dart_gp_filesystem_read_file>('gp_filesystem_read_file');
    return _gp_filesystem_read_file(
      fs,
      folder,
      filename,
      type,
      offset,
      buf,
      size,
      context,
    );
  }

  _dart_gp_filesystem_read_file _gp_filesystem_read_file;

  int gp_filesystem_delete_file(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_delete_file ??= _dylib.lookupFunction<
        _c_gp_filesystem_delete_file,
        _dart_gp_filesystem_delete_file>('gp_filesystem_delete_file');
    return _gp_filesystem_delete_file(
      fs,
      folder,
      filename,
      context,
    );
  }

  _dart_gp_filesystem_delete_file _gp_filesystem_delete_file;

  int gp_filesystem_get_storageinfo(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Pointer<CameraStorageInformation>> arg1,
    ffi.Pointer<ffi.Int32> nrofstorageinformations,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_get_storageinfo ??= _dylib.lookupFunction<
        _c_gp_filesystem_get_storageinfo,
        _dart_gp_filesystem_get_storageinfo>('gp_filesystem_get_storageinfo');
    return _gp_filesystem_get_storageinfo(
      fs,
      arg1,
      nrofstorageinformations,
      context,
    );
  }

  _dart_gp_filesystem_get_storageinfo _gp_filesystem_get_storageinfo;

  int gp_filesystem_set_funcs(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<_CameraFilesystemFuncs> funcs,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_filesystem_set_funcs ??= _dylib.lookupFunction<
        _c_gp_filesystem_set_funcs,
        _dart_gp_filesystem_set_funcs>('gp_filesystem_set_funcs');
    return _gp_filesystem_set_funcs(
      fs,
      funcs,
      data,
    );
  }

  _dart_gp_filesystem_set_funcs _gp_filesystem_set_funcs;

  int gp_filesystem_put_file(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> filename,
    int type,
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_put_file ??= _dylib.lookupFunction<_c_gp_filesystem_put_file,
        _dart_gp_filesystem_put_file>('gp_filesystem_put_file');
    return _gp_filesystem_put_file(
      fs,
      folder,
      filename,
      type,
      file,
      context,
    );
  }

  _dart_gp_filesystem_put_file _gp_filesystem_put_file;

  int gp_filesystem_delete_all(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_delete_all ??= _dylib.lookupFunction<
        _c_gp_filesystem_delete_all,
        _dart_gp_filesystem_delete_all>('gp_filesystem_delete_all');
    return _gp_filesystem_delete_all(
      fs,
      folder,
      context,
    );
  }

  _dart_gp_filesystem_delete_all _gp_filesystem_delete_all;

  int gp_filesystem_make_dir(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_make_dir ??= _dylib.lookupFunction<_c_gp_filesystem_make_dir,
        _dart_gp_filesystem_make_dir>('gp_filesystem_make_dir');
    return _gp_filesystem_make_dir(
      fs,
      folder,
      name,
      context,
    );
  }

  _dart_gp_filesystem_make_dir _gp_filesystem_make_dir;

  int gp_filesystem_remove_dir(
    ffi.Pointer<_CameraFilesystem> fs,
    ffi.Pointer<ffi.Int8> folder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _gp_filesystem_remove_dir ??= _dylib.lookupFunction<
        _c_gp_filesystem_remove_dir,
        _dart_gp_filesystem_remove_dir>('gp_filesystem_remove_dir');
    return _gp_filesystem_remove_dir(
      fs,
      folder,
      name,
      context,
    );
  }

  _dart_gp_filesystem_remove_dir _gp_filesystem_remove_dir;

  int gp_filesystem_dump(
    ffi.Pointer<_CameraFilesystem> fs,
  ) {
    _gp_filesystem_dump ??=
        _dylib.lookupFunction<_c_gp_filesystem_dump, _dart_gp_filesystem_dump>(
            'gp_filesystem_dump');
    return _gp_filesystem_dump(
      fs,
    );
  }

  _dart_gp_filesystem_dump _gp_filesystem_dump;

  int camera_id(
    ffi.Pointer<ffi.Int32> id,
  ) {
    _camera_id ??=
        _dylib.lookupFunction<_c_camera_id, _dart_camera_id>('camera_id');
    return _camera_id(
      id,
    );
  }

  _dart_camera_id _camera_id;

  int camera_abilities(
    ffi.Pointer<ffi.Int32> list,
  ) {
    _camera_abilities ??=
        _dylib.lookupFunction<_c_camera_abilities, _dart_camera_abilities>(
            'camera_abilities');
    return _camera_abilities(
      list,
    );
  }

  _dart_camera_abilities _camera_abilities;

  int camera_init(
    ffi.Pointer<ffi.Int32> camera,
    ffi.Pointer<ffi.Int32> context,
  ) {
    _camera_init ??=
        _dylib.lookupFunction<_c_camera_init, _dart_camera_init>('camera_init');
    return _camera_init(
      camera,
      context,
    );
  }

  _dart_camera_init _camera_init;

  int gp_list_new(
    ffi.Pointer<ffi.Pointer<_CameraList>> list,
  ) {
    _gp_list_new ??=
        _dylib.lookupFunction<_c_gp_list_new, _dart_gp_list_new>('gp_list_new');
    return _gp_list_new(
      list,
    );
  }

  _dart_gp_list_new _gp_list_new;

  int gp_list_ref(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_ref ??=
        _dylib.lookupFunction<_c_gp_list_ref, _dart_gp_list_ref>('gp_list_ref');
    return _gp_list_ref(
      list,
    );
  }

  _dart_gp_list_ref _gp_list_ref;

  int gp_list_unref(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_unref ??= _dylib
        .lookupFunction<_c_gp_list_unref, _dart_gp_list_unref>('gp_list_unref');
    return _gp_list_unref(
      list,
    );
  }

  _dart_gp_list_unref _gp_list_unref;

  int gp_list_free(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_free ??= _dylib
        .lookupFunction<_c_gp_list_free, _dart_gp_list_free>('gp_list_free');
    return _gp_list_free(
      list,
    );
  }

  _dart_gp_list_free _gp_list_free;

  int gp_list_count(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_count ??= _dylib
        .lookupFunction<_c_gp_list_count, _dart_gp_list_count>('gp_list_count');
    return _gp_list_count(
      list,
    );
  }

  _dart_gp_list_count _gp_list_count;

  int gp_list_append(
    ffi.Pointer<_CameraList> list,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _gp_list_append ??=
        _dylib.lookupFunction<_c_gp_list_append, _dart_gp_list_append>(
            'gp_list_append');
    return _gp_list_append(
      list,
      name,
      value,
    );
  }

  _dart_gp_list_append _gp_list_append;

  int gp_list_reset(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_reset ??= _dylib
        .lookupFunction<_c_gp_list_reset, _dart_gp_list_reset>('gp_list_reset');
    return _gp_list_reset(
      list,
    );
  }

  _dart_gp_list_reset _gp_list_reset;

  int gp_list_sort(
    ffi.Pointer<_CameraList> list,
  ) {
    _gp_list_sort ??= _dylib
        .lookupFunction<_c_gp_list_sort, _dart_gp_list_sort>('gp_list_sort');
    return _gp_list_sort(
      list,
    );
  }

  _dart_gp_list_sort _gp_list_sort;

  int gp_list_find_by_name(
    ffi.Pointer<_CameraList> list,
    ffi.Pointer<ffi.Int32> index,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_list_find_by_name ??= _dylib.lookupFunction<_c_gp_list_find_by_name,
        _dart_gp_list_find_by_name>('gp_list_find_by_name');
    return _gp_list_find_by_name(
      list,
      index,
      name,
    );
  }

  _dart_gp_list_find_by_name _gp_list_find_by_name;

  int gp_list_get_name(
    ffi.Pointer<_CameraList> list,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    _gp_list_get_name ??=
        _dylib.lookupFunction<_c_gp_list_get_name, _dart_gp_list_get_name>(
            'gp_list_get_name');
    return _gp_list_get_name(
      list,
      index,
      name,
    );
  }

  _dart_gp_list_get_name _gp_list_get_name;

  int gp_list_get_value(
    ffi.Pointer<_CameraList> list,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    _gp_list_get_value ??=
        _dylib.lookupFunction<_c_gp_list_get_value, _dart_gp_list_get_value>(
            'gp_list_get_value');
    return _gp_list_get_value(
      list,
      index,
      value,
    );
  }

  _dart_gp_list_get_value _gp_list_get_value;

  int gp_list_set_name(
    ffi.Pointer<_CameraList> list,
    int index,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_list_set_name ??=
        _dylib.lookupFunction<_c_gp_list_set_name, _dart_gp_list_set_name>(
            'gp_list_set_name');
    return _gp_list_set_name(
      list,
      index,
      name,
    );
  }

  _dart_gp_list_set_name _gp_list_set_name;

  int gp_list_set_value(
    ffi.Pointer<_CameraList> list,
    int index,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _gp_list_set_value ??=
        _dylib.lookupFunction<_c_gp_list_set_value, _dart_gp_list_set_value>(
            'gp_list_set_value');
    return _gp_list_set_value(
      list,
      index,
      value,
    );
  }

  _dart_gp_list_set_value _gp_list_set_value;

  int gp_list_populate(
    ffi.Pointer<_CameraList> list,
    ffi.Pointer<ffi.Int8> format,
    int count,
  ) {
    _gp_list_populate ??=
        _dylib.lookupFunction<_c_gp_list_populate, _dart_gp_list_populate>(
            'gp_list_populate');
    return _gp_list_populate(
      list,
      format,
      count,
    );
  }

  _dart_gp_list_populate _gp_list_populate;

  ffi.Pointer<ffi.Int8> gp_result_as_string(
    int result,
  ) {
    _gp_result_as_string ??= _dylib.lookupFunction<_c_gp_result_as_string,
        _dart_gp_result_as_string>('gp_result_as_string');
    return _gp_result_as_string(
      result,
    );
  }

  _dart_gp_result_as_string _gp_result_as_string;

  int gp_setting_set(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _gp_setting_set ??=
        _dylib.lookupFunction<_c_gp_setting_set, _dart_gp_setting_set>(
            'gp_setting_set');
    return _gp_setting_set(
      id,
      key,
      value,
    );
  }

  _dart_gp_setting_set _gp_setting_set;

  int gp_setting_get(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _gp_setting_get ??=
        _dylib.lookupFunction<_c_gp_setting_get, _dart_gp_setting_get>(
            'gp_setting_get');
    return _gp_setting_get(
      id,
      key,
      value,
    );
  }

  _dart_gp_setting_get _gp_setting_get;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> gp_library_version(
    int verbose,
  ) {
    _gp_library_version ??=
        _dylib.lookupFunction<_c_gp_library_version, _dart_gp_library_version>(
            'gp_library_version');
    return _gp_library_version(
      verbose,
    );
  }

  _dart_gp_library_version _gp_library_version;

  int gp_widget_new(
    int type,
    ffi.Pointer<ffi.Int8> label,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> widget,
  ) {
    _gp_widget_new ??= _dylib
        .lookupFunction<_c_gp_widget_new, _dart_gp_widget_new>('gp_widget_new');
    return _gp_widget_new(
      type,
      label,
      widget,
    );
  }

  _dart_gp_widget_new _gp_widget_new;

  int gp_widget_free(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_free ??=
        _dylib.lookupFunction<_c_gp_widget_free, _dart_gp_widget_free>(
            'gp_widget_free');
    return _gp_widget_free(
      widget,
    );
  }

  _dart_gp_widget_free _gp_widget_free;

  int gp_widget_ref(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_ref ??= _dylib
        .lookupFunction<_c_gp_widget_ref, _dart_gp_widget_ref>('gp_widget_ref');
    return _gp_widget_ref(
      widget,
    );
  }

  _dart_gp_widget_ref _gp_widget_ref;

  int gp_widget_unref(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_unref ??=
        _dylib.lookupFunction<_c_gp_widget_unref, _dart_gp_widget_unref>(
            'gp_widget_unref');
    return _gp_widget_unref(
      widget,
    );
  }

  _dart_gp_widget_unref _gp_widget_unref;

  int gp_widget_append(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<_CameraWidget> child,
  ) {
    _gp_widget_append ??=
        _dylib.lookupFunction<_c_gp_widget_append, _dart_gp_widget_append>(
            'gp_widget_append');
    return _gp_widget_append(
      widget,
      child,
    );
  }

  _dart_gp_widget_append _gp_widget_append;

  int gp_widget_prepend(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<_CameraWidget> child,
  ) {
    _gp_widget_prepend ??=
        _dylib.lookupFunction<_c_gp_widget_prepend, _dart_gp_widget_prepend>(
            'gp_widget_prepend');
    return _gp_widget_prepend(
      widget,
      child,
    );
  }

  _dart_gp_widget_prepend _gp_widget_prepend;

  int gp_widget_count_children(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_count_children ??= _dylib.lookupFunction<
        _c_gp_widget_count_children,
        _dart_gp_widget_count_children>('gp_widget_count_children');
    return _gp_widget_count_children(
      widget,
    );
  }

  _dart_gp_widget_count_children _gp_widget_count_children;

  int gp_widget_get_child(
    ffi.Pointer<_CameraWidget> widget,
    int child_number,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
  ) {
    _gp_widget_get_child ??= _dylib.lookupFunction<_c_gp_widget_get_child,
        _dart_gp_widget_get_child>('gp_widget_get_child');
    return _gp_widget_get_child(
      widget,
      child_number,
      child,
    );
  }

  _dart_gp_widget_get_child _gp_widget_get_child;

  int gp_widget_get_child_by_label(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int8> label,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
  ) {
    _gp_widget_get_child_by_label ??= _dylib.lookupFunction<
        _c_gp_widget_get_child_by_label,
        _dart_gp_widget_get_child_by_label>('gp_widget_get_child_by_label');
    return _gp_widget_get_child_by_label(
      widget,
      label,
      child,
    );
  }

  _dart_gp_widget_get_child_by_label _gp_widget_get_child_by_label;

  int gp_widget_get_child_by_id(
    ffi.Pointer<_CameraWidget> widget,
    int id,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
  ) {
    _gp_widget_get_child_by_id ??= _dylib.lookupFunction<
        _c_gp_widget_get_child_by_id,
        _dart_gp_widget_get_child_by_id>('gp_widget_get_child_by_id');
    return _gp_widget_get_child_by_id(
      widget,
      id,
      child,
    );
  }

  _dart_gp_widget_get_child_by_id _gp_widget_get_child_by_id;

  int gp_widget_get_child_by_name(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
  ) {
    _gp_widget_get_child_by_name ??= _dylib.lookupFunction<
        _c_gp_widget_get_child_by_name,
        _dart_gp_widget_get_child_by_name>('gp_widget_get_child_by_name');
    return _gp_widget_get_child_by_name(
      widget,
      name,
      child,
    );
  }

  _dart_gp_widget_get_child_by_name _gp_widget_get_child_by_name;

  int gp_widget_get_root(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> root,
  ) {
    _gp_widget_get_root ??=
        _dylib.lookupFunction<_c_gp_widget_get_root, _dart_gp_widget_get_root>(
            'gp_widget_get_root');
    return _gp_widget_get_root(
      widget,
      root,
    );
  }

  _dart_gp_widget_get_root _gp_widget_get_root;

  int gp_widget_get_parent(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<_CameraWidget>> parent,
  ) {
    _gp_widget_get_parent ??= _dylib.lookupFunction<_c_gp_widget_get_parent,
        _dart_gp_widget_get_parent>('gp_widget_get_parent');
    return _gp_widget_get_parent(
      widget,
      parent,
    );
  }

  _dart_gp_widget_get_parent _gp_widget_get_parent;

  int gp_widget_set_value(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Void> value,
  ) {
    _gp_widget_set_value ??= _dylib.lookupFunction<_c_gp_widget_set_value,
        _dart_gp_widget_set_value>('gp_widget_set_value');
    return _gp_widget_set_value(
      widget,
      value,
    );
  }

  _dart_gp_widget_set_value _gp_widget_set_value;

  int gp_widget_get_value(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Void> value,
  ) {
    _gp_widget_get_value ??= _dylib.lookupFunction<_c_gp_widget_get_value,
        _dart_gp_widget_get_value>('gp_widget_get_value');
    return _gp_widget_get_value(
      widget,
      value,
    );
  }

  _dart_gp_widget_get_value _gp_widget_get_value;

  int gp_widget_set_name(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_widget_set_name ??=
        _dylib.lookupFunction<_c_gp_widget_set_name, _dart_gp_widget_set_name>(
            'gp_widget_set_name');
    return _gp_widget_set_name(
      widget,
      name,
    );
  }

  _dart_gp_widget_set_name _gp_widget_set_name;

  int gp_widget_get_name(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    _gp_widget_get_name ??=
        _dylib.lookupFunction<_c_gp_widget_get_name, _dart_gp_widget_get_name>(
            'gp_widget_get_name');
    return _gp_widget_get_name(
      widget,
      name,
    );
  }

  _dart_gp_widget_get_name _gp_widget_get_name;

  int gp_widget_set_info(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int8> info,
  ) {
    _gp_widget_set_info ??=
        _dylib.lookupFunction<_c_gp_widget_set_info, _dart_gp_widget_set_info>(
            'gp_widget_set_info');
    return _gp_widget_set_info(
      widget,
      info,
    );
  }

  _dart_gp_widget_set_info _gp_widget_set_info;

  int gp_widget_get_info(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> info,
  ) {
    _gp_widget_get_info ??=
        _dylib.lookupFunction<_c_gp_widget_get_info, _dart_gp_widget_get_info>(
            'gp_widget_get_info');
    return _gp_widget_get_info(
      widget,
      info,
    );
  }

  _dart_gp_widget_get_info _gp_widget_get_info;

  int gp_widget_get_id(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int32> id,
  ) {
    _gp_widget_get_id ??=
        _dylib.lookupFunction<_c_gp_widget_get_id, _dart_gp_widget_get_id>(
            'gp_widget_get_id');
    return _gp_widget_get_id(
      widget,
      id,
    );
  }

  _dart_gp_widget_get_id _gp_widget_get_id;

  int gp_widget_get_type(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int32> type,
  ) {
    _gp_widget_get_type ??=
        _dylib.lookupFunction<_c_gp_widget_get_type, _dart_gp_widget_get_type>(
            'gp_widget_get_type');
    return _gp_widget_get_type(
      widget,
      type,
    );
  }

  _dart_gp_widget_get_type _gp_widget_get_type;

  int gp_widget_get_label(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> label,
  ) {
    _gp_widget_get_label ??= _dylib.lookupFunction<_c_gp_widget_get_label,
        _dart_gp_widget_get_label>('gp_widget_get_label');
    return _gp_widget_get_label(
      widget,
      label,
    );
  }

  _dart_gp_widget_get_label _gp_widget_get_label;

  int gp_widget_set_range(
    ffi.Pointer<_CameraWidget> range,
    double low,
    double high,
    double increment,
  ) {
    _gp_widget_set_range ??= _dylib.lookupFunction<_c_gp_widget_set_range,
        _dart_gp_widget_set_range>('gp_widget_set_range');
    return _gp_widget_set_range(
      range,
      low,
      high,
      increment,
    );
  }

  _dart_gp_widget_set_range _gp_widget_set_range;

  int gp_widget_get_range(
    ffi.Pointer<_CameraWidget> range,
    ffi.Pointer<ffi.Float> min,
    ffi.Pointer<ffi.Float> max,
    ffi.Pointer<ffi.Float> increment,
  ) {
    _gp_widget_get_range ??= _dylib.lookupFunction<_c_gp_widget_get_range,
        _dart_gp_widget_get_range>('gp_widget_get_range');
    return _gp_widget_get_range(
      range,
      min,
      max,
      increment,
    );
  }

  _dart_gp_widget_get_range _gp_widget_get_range;

  int gp_widget_add_choice(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int8> choice,
  ) {
    _gp_widget_add_choice ??= _dylib.lookupFunction<_c_gp_widget_add_choice,
        _dart_gp_widget_add_choice>('gp_widget_add_choice');
    return _gp_widget_add_choice(
      widget,
      choice,
    );
  }

  _dart_gp_widget_add_choice _gp_widget_add_choice;

  int gp_widget_count_choices(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_count_choices ??= _dylib.lookupFunction<
        _c_gp_widget_count_choices,
        _dart_gp_widget_count_choices>('gp_widget_count_choices');
    return _gp_widget_count_choices(
      widget,
    );
  }

  _dart_gp_widget_count_choices _gp_widget_count_choices;

  int gp_widget_get_choice(
    ffi.Pointer<_CameraWidget> widget,
    int choice_number,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> choice,
  ) {
    _gp_widget_get_choice ??= _dylib.lookupFunction<_c_gp_widget_get_choice,
        _dart_gp_widget_get_choice>('gp_widget_get_choice');
    return _gp_widget_get_choice(
      widget,
      choice_number,
      choice,
    );
  }

  _dart_gp_widget_get_choice _gp_widget_get_choice;

  int gp_widget_changed(
    ffi.Pointer<_CameraWidget> widget,
  ) {
    _gp_widget_changed ??=
        _dylib.lookupFunction<_c_gp_widget_changed, _dart_gp_widget_changed>(
            'gp_widget_changed');
    return _gp_widget_changed(
      widget,
    );
  }

  _dart_gp_widget_changed _gp_widget_changed;

  int gp_widget_set_changed(
    ffi.Pointer<_CameraWidget> widget,
    int changed,
  ) {
    _gp_widget_set_changed ??= _dylib.lookupFunction<_c_gp_widget_set_changed,
        _dart_gp_widget_set_changed>('gp_widget_set_changed');
    return _gp_widget_set_changed(
      widget,
      changed,
    );
  }

  _dart_gp_widget_set_changed _gp_widget_set_changed;

  int gp_widget_set_readonly(
    ffi.Pointer<_CameraWidget> widget,
    int readonly,
  ) {
    _gp_widget_set_readonly ??= _dylib.lookupFunction<_c_gp_widget_set_readonly,
        _dart_gp_widget_set_readonly>('gp_widget_set_readonly');
    return _gp_widget_set_readonly(
      widget,
      readonly,
    );
  }

  _dart_gp_widget_set_readonly _gp_widget_set_readonly;

  int gp_widget_get_readonly(
    ffi.Pointer<_CameraWidget> widget,
    ffi.Pointer<ffi.Int32> readonly,
  ) {
    _gp_widget_get_readonly ??= _dylib.lookupFunction<_c_gp_widget_get_readonly,
        _dart_gp_widget_get_readonly>('gp_widget_get_readonly');
    return _gp_widget_get_readonly(
      widget,
      readonly,
    );
  }

  _dart_gp_widget_get_readonly _gp_widget_get_readonly;

  int gp_bayer_expand(
    ffi.Pointer<ffi.Uint8> input,
    int w,
    int h,
    ffi.Pointer<ffi.Uint8> output,
    int tile,
  ) {
    _gp_bayer_expand ??=
        _dylib.lookupFunction<_c_gp_bayer_expand, _dart_gp_bayer_expand>(
            'gp_bayer_expand');
    return _gp_bayer_expand(
      input,
      w,
      h,
      output,
      tile,
    );
  }

  _dart_gp_bayer_expand _gp_bayer_expand;

  int gp_bayer_decode(
    ffi.Pointer<ffi.Uint8> input,
    int w,
    int h,
    ffi.Pointer<ffi.Uint8> output,
    int tile,
  ) {
    _gp_bayer_decode ??=
        _dylib.lookupFunction<_c_gp_bayer_decode, _dart_gp_bayer_decode>(
            'gp_bayer_decode');
    return _gp_bayer_decode(
      input,
      w,
      h,
      output,
      tile,
    );
  }

  _dart_gp_bayer_decode _gp_bayer_decode;

  int gp_bayer_interpolate(
    ffi.Pointer<ffi.Uint8> image,
    int w,
    int h,
    int tile,
  ) {
    _gp_bayer_interpolate ??= _dylib.lookupFunction<_c_gp_bayer_interpolate,
        _dart_gp_bayer_interpolate>('gp_bayer_interpolate');
    return _gp_bayer_interpolate(
      image,
      w,
      h,
      tile,
    );
  }

  _dart_gp_bayer_interpolate _gp_bayer_interpolate;

  int gp_ahd_decode(
    ffi.Pointer<ffi.Uint8> input,
    int w,
    int h,
    ffi.Pointer<ffi.Uint8> output,
    int tile,
  ) {
    _gp_ahd_decode ??= _dylib
        .lookupFunction<_c_gp_ahd_decode, _dart_gp_ahd_decode>('gp_ahd_decode');
    return _gp_ahd_decode(
      input,
      w,
      h,
      output,
      tile,
    );
  }

  _dart_gp_ahd_decode _gp_ahd_decode;

  int gp_ahd_interpolate(
    ffi.Pointer<ffi.Uint8> image,
    int w,
    int h,
    int tile,
  ) {
    _gp_ahd_interpolate ??=
        _dylib.lookupFunction<_c_gp_ahd_interpolate, _dart_gp_ahd_interpolate>(
            'gp_ahd_interpolate');
    return _gp_ahd_interpolate(
      image,
      w,
      h,
      tile,
    );
  }

  _dart_gp_ahd_interpolate _gp_ahd_interpolate;

  ffi.Pointer<ffi.Uint8> gpi_exif_get_thumbnail_and_size(
    ffi.Pointer<ffi.Void> exifdat,
    ffi.Pointer<ffi.Int64> size,
  ) {
    _gpi_exif_get_thumbnail_and_size ??= _dylib.lookupFunction<
            _c_gpi_exif_get_thumbnail_and_size,
            _dart_gpi_exif_get_thumbnail_and_size>(
        'gpi_exif_get_thumbnail_and_size');
    return _gpi_exif_get_thumbnail_and_size(
      exifdat,
      size,
    );
  }

  _dart_gpi_exif_get_thumbnail_and_size _gpi_exif_get_thumbnail_and_size;

  int gpi_exif_stat(
    ffi.Pointer<ffi.Void> exifdata,
  ) {
    _gpi_exif_stat ??= _dylib
        .lookupFunction<_c_gpi_exif_stat, _dart_gpi_exif_stat>('gpi_exif_stat');
    return _gpi_exif_stat(
      exifdata,
    );
  }

  _dart_gpi_exif_stat _gpi_exif_stat;

  int gp_gamma_fill_table(
    ffi.Pointer<ffi.Uint8> table,
    double g,
  ) {
    _gp_gamma_fill_table ??= _dylib.lookupFunction<_c_gp_gamma_fill_table,
        _dart_gp_gamma_fill_table>('gp_gamma_fill_table');
    return _gp_gamma_fill_table(
      table,
      g,
    );
  }

  _dart_gp_gamma_fill_table _gp_gamma_fill_table;

  int gp_gamma_correct_single(
    ffi.Pointer<ffi.Uint8> table,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    _gp_gamma_correct_single ??= _dylib.lookupFunction<
        _c_gp_gamma_correct_single,
        _dart_gp_gamma_correct_single>('gp_gamma_correct_single');
    return _gp_gamma_correct_single(
      table,
      data,
      data_size,
    );
  }

  _dart_gp_gamma_correct_single _gp_gamma_correct_single;

  ffi.Pointer<chunk> gpi_jpeg_chunk_new(
    int length,
  ) {
    _gpi_jpeg_chunk_new ??=
        _dylib.lookupFunction<_c_gpi_jpeg_chunk_new, _dart_gpi_jpeg_chunk_new>(
            'gpi_jpeg_chunk_new');
    return _gpi_jpeg_chunk_new(
      length,
    );
  }

  _dart_gpi_jpeg_chunk_new _gpi_jpeg_chunk_new;

  ffi.Pointer<chunk> gpi_jpeg_chunk_new_filled(
    int length,
    ffi.Pointer<ffi.Int8> data,
  ) {
    _gpi_jpeg_chunk_new_filled ??= _dylib.lookupFunction<
        _c_gpi_jpeg_chunk_new_filled,
        _dart_gpi_jpeg_chunk_new_filled>('gpi_jpeg_chunk_new_filled');
    return _gpi_jpeg_chunk_new_filled(
      length,
      data,
    );
  }

  _dart_gpi_jpeg_chunk_new_filled _gpi_jpeg_chunk_new_filled;

  void gpi_jpeg_chunk_destroy(
    ffi.Pointer<chunk> mychunk,
  ) {
    _gpi_jpeg_chunk_destroy ??= _dylib.lookupFunction<_c_gpi_jpeg_chunk_destroy,
        _dart_gpi_jpeg_chunk_destroy>('gpi_jpeg_chunk_destroy');
    return _gpi_jpeg_chunk_destroy(
      mychunk,
    );
  }

  _dart_gpi_jpeg_chunk_destroy _gpi_jpeg_chunk_destroy;

  void gpi_jpeg_chunk_print(
    ffi.Pointer<chunk> mychunk,
  ) {
    _gpi_jpeg_chunk_print ??= _dylib.lookupFunction<_c_gpi_jpeg_chunk_print,
        _dart_gpi_jpeg_chunk_print>('gpi_jpeg_chunk_print');
    return _gpi_jpeg_chunk_print(
      mychunk,
    );
  }

  _dart_gpi_jpeg_chunk_print _gpi_jpeg_chunk_print;

  int gpi_jpeg_findff(
    ffi.Pointer<ffi.Int32> location,
    ffi.Pointer<chunk> picture,
  ) {
    _gpi_jpeg_findff ??=
        _dylib.lookupFunction<_c_gpi_jpeg_findff, _dart_gpi_jpeg_findff>(
            'gpi_jpeg_findff');
    return _gpi_jpeg_findff(
      location,
      picture,
    );
  }

  _dart_gpi_jpeg_findff _gpi_jpeg_findff;

  int gpi_jpeg_findactivemarker(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int32> location,
    ffi.Pointer<chunk> picture,
  ) {
    _gpi_jpeg_findactivemarker ??= _dylib.lookupFunction<
        _c_gpi_jpeg_findactivemarker,
        _dart_gpi_jpeg_findactivemarker>('gpi_jpeg_findactivemarker');
    return _gpi_jpeg_findactivemarker(
      id,
      location,
      picture,
    );
  }

  _dart_gpi_jpeg_findactivemarker _gpi_jpeg_findactivemarker;

  ffi.Pointer<ffi.Int8> gpi_jpeg_markername(
    int c,
  ) {
    _gpi_jpeg_markername ??= _dylib.lookupFunction<_c_gpi_jpeg_markername,
        _dart_gpi_jpeg_markername>('gpi_jpeg_markername');
    return _gpi_jpeg_markername(
      c,
    );
  }

  _dart_gpi_jpeg_markername _gpi_jpeg_markername;

  ffi.Pointer<jpeg> gpi_jpeg_new() {
    _gpi_jpeg_new ??= _dylib
        .lookupFunction<_c_gpi_jpeg_new, _dart_gpi_jpeg_new>('gpi_jpeg_new');
    return _gpi_jpeg_new();
  }

  _dart_gpi_jpeg_new _gpi_jpeg_new;

  void gpi_jpeg_destroy(
    ffi.Pointer<jpeg> myjpeg,
  ) {
    _gpi_jpeg_destroy ??=
        _dylib.lookupFunction<_c_gpi_jpeg_destroy, _dart_gpi_jpeg_destroy>(
            'gpi_jpeg_destroy');
    return _gpi_jpeg_destroy(
      myjpeg,
    );
  }

  _dart_gpi_jpeg_destroy _gpi_jpeg_destroy;

  void gpi_jpeg_add_marker(
    ffi.Pointer<jpeg> myjpeg,
    ffi.Pointer<chunk> picture,
    int start,
    int end,
  ) {
    _gpi_jpeg_add_marker ??= _dylib.lookupFunction<_c_gpi_jpeg_add_marker,
        _dart_gpi_jpeg_add_marker>('gpi_jpeg_add_marker');
    return _gpi_jpeg_add_marker(
      myjpeg,
      picture,
      start,
      end,
    );
  }

  _dart_gpi_jpeg_add_marker _gpi_jpeg_add_marker;

  void gpi_jpeg_add_chunk(
    ffi.Pointer<jpeg> myjpeg,
    ffi.Pointer<chunk> source,
  ) {
    _gpi_jpeg_add_chunk ??=
        _dylib.lookupFunction<_c_gpi_jpeg_add_chunk, _dart_gpi_jpeg_add_chunk>(
            'gpi_jpeg_add_chunk');
    return _gpi_jpeg_add_chunk(
      myjpeg,
      source,
    );
  }

  _dart_gpi_jpeg_add_chunk _gpi_jpeg_add_chunk;

  void gpi_jpeg_parse(
    ffi.Pointer<jpeg> myjpeg,
    ffi.Pointer<chunk> picture,
  ) {
    _gpi_jpeg_parse ??=
        _dylib.lookupFunction<_c_gpi_jpeg_parse, _dart_gpi_jpeg_parse>(
            'gpi_jpeg_parse');
    return _gpi_jpeg_parse(
      myjpeg,
      picture,
    );
  }

  _dart_gpi_jpeg_parse _gpi_jpeg_parse;

  void gpi_jpeg_print(
    ffi.Pointer<jpeg> myjpeg,
  ) {
    _gpi_jpeg_print ??=
        _dylib.lookupFunction<_c_gpi_jpeg_print, _dart_gpi_jpeg_print>(
            'gpi_jpeg_print');
    return _gpi_jpeg_print(
      myjpeg,
    );
  }

  _dart_gpi_jpeg_print _gpi_jpeg_print;

  ffi.Pointer<chunk> gpi_jpeg_make_start() {
    _gpi_jpeg_make_start ??= _dylib.lookupFunction<_c_gpi_jpeg_make_start,
        _dart_gpi_jpeg_make_start>('gpi_jpeg_make_start');
    return _gpi_jpeg_make_start();
  }

  _dart_gpi_jpeg_make_start _gpi_jpeg_make_start;

  ffi.Pointer<chunk> gpi_jpeg_make_SOFC(
    int width,
    int height,
    int vh1,
    int vh2,
    int vh3,
    int q1,
    int q2,
    int q3,
  ) {
    _gpi_jpeg_make_SOFC ??=
        _dylib.lookupFunction<_c_gpi_jpeg_make_SOFC, _dart_gpi_jpeg_make_SOFC>(
            'gpi_jpeg_make_SOFC');
    return _gpi_jpeg_make_SOFC(
      width,
      height,
      vh1,
      vh2,
      vh3,
      q1,
      q2,
      q3,
    );
  }

  _dart_gpi_jpeg_make_SOFC _gpi_jpeg_make_SOFC;

  ffi.Pointer<chunk> gpi_jpeg_makeSsSeAhAl(
    int huffset1,
    int huffset2,
    int huffset3,
  ) {
    _gpi_jpeg_makeSsSeAhAl ??= _dylib.lookupFunction<_c_gpi_jpeg_makeSsSeAhAl,
        _dart_gpi_jpeg_makeSsSeAhAl>('gpi_jpeg_makeSsSeAhAl');
    return _gpi_jpeg_makeSsSeAhAl(
      huffset1,
      huffset2,
      huffset3,
    );
  }

  _dart_gpi_jpeg_makeSsSeAhAl _gpi_jpeg_makeSsSeAhAl;

  void gpi_jpeg_print_quantization_table(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
  ) {
    _gpi_jpeg_print_quantization_table ??= _dylib.lookupFunction<
            _c_gpi_jpeg_print_quantization_table,
            _dart_gpi_jpeg_print_quantization_table>(
        'gpi_jpeg_print_quantization_table');
    return _gpi_jpeg_print_quantization_table(
      table,
    );
  }

  _dart_gpi_jpeg_print_quantization_table _gpi_jpeg_print_quantization_table;

  ffi.Pointer<chunk> gpi_jpeg_make_quantization(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
    int number,
  ) {
    _gpi_jpeg_make_quantization ??= _dylib.lookupFunction<
        _c_gpi_jpeg_make_quantization,
        _dart_gpi_jpeg_make_quantization>('gpi_jpeg_make_quantization');
    return _gpi_jpeg_make_quantization(
      table,
      number,
    );
  }

  _dart_gpi_jpeg_make_quantization _gpi_jpeg_make_quantization;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> gpi_jpeg_quantization2table(
    ffi.Pointer<chunk> qmarker,
  ) {
    _gpi_jpeg_quantization2table ??= _dylib.lookupFunction<
        _c_gpi_jpeg_quantization2table,
        _dart_gpi_jpeg_quantization2table>('gpi_jpeg_quantization2table');
    return _gpi_jpeg_quantization2table(
      qmarker,
    );
  }

  _dart_gpi_jpeg_quantization2table _gpi_jpeg_quantization2table;

  ffi.Pointer<jpeg> gpi_jpeg_header(
    int width,
    int height,
    int vh1,
    int vh2,
    int vh3,
    int q1,
    int q2,
    int q3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> quant1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> quant2,
    int huffset1,
    int huffset2,
    int huffset3,
    ffi.Pointer<chunk> huff1,
    ffi.Pointer<chunk> huff2,
    ffi.Pointer<chunk> huff3,
    ffi.Pointer<chunk> huff4,
  ) {
    _gpi_jpeg_header ??=
        _dylib.lookupFunction<_c_gpi_jpeg_header, _dart_gpi_jpeg_header>(
            'gpi_jpeg_header');
    return _gpi_jpeg_header(
      width,
      height,
      vh1,
      vh2,
      vh3,
      q1,
      q2,
      q3,
      quant1,
      quant2,
      huffset1,
      huffset2,
      huffset3,
      huff1,
      huff2,
      huff3,
      huff4,
    );
  }

  _dart_gpi_jpeg_header _gpi_jpeg_header;

  int gpi_jpeg_write(
    ffi.Pointer<ffi.Int32> file,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<jpeg> myjpeg,
  ) {
    _gpi_jpeg_write ??=
        _dylib.lookupFunction<_c_gpi_jpeg_write, _dart_gpi_jpeg_write>(
            'gpi_jpeg_write');
    return _gpi_jpeg_write(
      file,
      name,
      myjpeg,
    );
  }

  _dart_gpi_jpeg_write _gpi_jpeg_write;

  int gp_port_info_new(
    ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
  ) {
    _gp_port_info_new ??=
        _dylib.lookupFunction<_c_gp_port_info_new, _dart_gp_port_info_new>(
            'gp_port_info_new');
    return _gp_port_info_new(
      info,
    );
  }

  _dart_gp_port_info_new _gp_port_info_new;

  int gp_port_info_get_name(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    _gp_port_info_get_name ??= _dylib.lookupFunction<_c_gp_port_info_get_name,
        _dart_gp_port_info_get_name>('gp_port_info_get_name');
    return _gp_port_info_get_name(
      info,
      name,
    );
  }

  _dart_gp_port_info_get_name _gp_port_info_get_name;

  int gp_port_info_set_name(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_port_info_set_name ??= _dylib.lookupFunction<_c_gp_port_info_set_name,
        _dart_gp_port_info_set_name>('gp_port_info_set_name');
    return _gp_port_info_set_name(
      info,
      name,
    );
  }

  _dart_gp_port_info_set_name _gp_port_info_set_name;

  int gp_port_info_get_path(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> path,
  ) {
    _gp_port_info_get_path ??= _dylib.lookupFunction<_c_gp_port_info_get_path,
        _dart_gp_port_info_get_path>('gp_port_info_get_path');
    return _gp_port_info_get_path(
      info,
      path,
    );
  }

  _dart_gp_port_info_get_path _gp_port_info_get_path;

  int gp_port_info_set_path(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _gp_port_info_set_path ??= _dylib.lookupFunction<_c_gp_port_info_set_path,
        _dart_gp_port_info_set_path>('gp_port_info_set_path');
    return _gp_port_info_set_path(
      info,
      path,
    );
  }

  _dart_gp_port_info_set_path _gp_port_info_set_path;

  int gp_port_info_get_type(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Int32> type,
  ) {
    _gp_port_info_get_type ??= _dylib.lookupFunction<_c_gp_port_info_get_type,
        _dart_gp_port_info_get_type>('gp_port_info_get_type');
    return _gp_port_info_get_type(
      info,
      type,
    );
  }

  _dart_gp_port_info_get_type _gp_port_info_get_type;

  int gp_port_info_set_type(
    ffi.Pointer<_GPPortInfo> info,
    int type,
  ) {
    _gp_port_info_set_type ??= _dylib.lookupFunction<_c_gp_port_info_set_type,
        _dart_gp_port_info_set_type>('gp_port_info_set_type');
    return _gp_port_info_set_type(
      info,
      type,
    );
  }

  _dart_gp_port_info_set_type _gp_port_info_set_type;

  int gp_port_info_get_library_filename(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lib,
  ) {
    _gp_port_info_get_library_filename ??= _dylib.lookupFunction<
            _c_gp_port_info_get_library_filename,
            _dart_gp_port_info_get_library_filename>(
        'gp_port_info_get_library_filename');
    return _gp_port_info_get_library_filename(
      info,
      lib,
    );
  }

  _dart_gp_port_info_get_library_filename _gp_port_info_get_library_filename;

  int gp_port_info_set_library_filename(
    ffi.Pointer<_GPPortInfo> info,
    ffi.Pointer<ffi.Int8> lib,
  ) {
    _gp_port_info_set_library_filename ??= _dylib.lookupFunction<
            _c_gp_port_info_set_library_filename,
            _dart_gp_port_info_set_library_filename>(
        'gp_port_info_set_library_filename');
    return _gp_port_info_set_library_filename(
      info,
      lib,
    );
  }

  _dart_gp_port_info_set_library_filename _gp_port_info_set_library_filename;

  int gp_port_info_list_new(
    ffi.Pointer<ffi.Pointer<_GPPortInfoList>> list,
  ) {
    _gp_port_info_list_new ??= _dylib.lookupFunction<_c_gp_port_info_list_new,
        _dart_gp_port_info_list_new>('gp_port_info_list_new');
    return _gp_port_info_list_new(
      list,
    );
  }

  _dart_gp_port_info_list_new _gp_port_info_list_new;

  int gp_port_info_list_free(
    ffi.Pointer<_GPPortInfoList> list,
  ) {
    _gp_port_info_list_free ??= _dylib.lookupFunction<_c_gp_port_info_list_free,
        _dart_gp_port_info_list_free>('gp_port_info_list_free');
    return _gp_port_info_list_free(
      list,
    );
  }

  _dart_gp_port_info_list_free _gp_port_info_list_free;

  int gp_port_info_list_append(
    ffi.Pointer<_GPPortInfoList> list,
    ffi.Pointer<_GPPortInfo> info,
  ) {
    _gp_port_info_list_append ??= _dylib.lookupFunction<
        _c_gp_port_info_list_append,
        _dart_gp_port_info_list_append>('gp_port_info_list_append');
    return _gp_port_info_list_append(
      list,
      info,
    );
  }

  _dart_gp_port_info_list_append _gp_port_info_list_append;

  int gp_port_info_list_load(
    ffi.Pointer<_GPPortInfoList> list,
  ) {
    _gp_port_info_list_load ??= _dylib.lookupFunction<_c_gp_port_info_list_load,
        _dart_gp_port_info_list_load>('gp_port_info_list_load');
    return _gp_port_info_list_load(
      list,
    );
  }

  _dart_gp_port_info_list_load _gp_port_info_list_load;

  int gp_port_info_list_count(
    ffi.Pointer<_GPPortInfoList> list,
  ) {
    _gp_port_info_list_count ??= _dylib.lookupFunction<
        _c_gp_port_info_list_count,
        _dart_gp_port_info_list_count>('gp_port_info_list_count');
    return _gp_port_info_list_count(
      list,
    );
  }

  _dart_gp_port_info_list_count _gp_port_info_list_count;

  int gp_port_info_list_lookup_path(
    ffi.Pointer<_GPPortInfoList> list,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _gp_port_info_list_lookup_path ??= _dylib.lookupFunction<
        _c_gp_port_info_list_lookup_path,
        _dart_gp_port_info_list_lookup_path>('gp_port_info_list_lookup_path');
    return _gp_port_info_list_lookup_path(
      list,
      path,
    );
  }

  _dart_gp_port_info_list_lookup_path _gp_port_info_list_lookup_path;

  int gp_port_info_list_lookup_name(
    ffi.Pointer<_GPPortInfoList> list,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gp_port_info_list_lookup_name ??= _dylib.lookupFunction<
        _c_gp_port_info_list_lookup_name,
        _dart_gp_port_info_list_lookup_name>('gp_port_info_list_lookup_name');
    return _gp_port_info_list_lookup_name(
      list,
      name,
    );
  }

  _dart_gp_port_info_list_lookup_name _gp_port_info_list_lookup_name;

  int gp_port_info_list_get_info(
    ffi.Pointer<_GPPortInfoList> list,
    int n,
    ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
  ) {
    _gp_port_info_list_get_info ??= _dylib.lookupFunction<
        _c_gp_port_info_list_get_info,
        _dart_gp_port_info_list_get_info>('gp_port_info_list_get_info');
    return _gp_port_info_list_get_info(
      list,
      n,
      info,
    );
  }

  _dart_gp_port_info_list_get_info _gp_port_info_list_get_info;

  ffi.Pointer<ffi.Int8> gp_port_message_codeset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _gp_port_message_codeset ??= _dylib.lookupFunction<
        _c_gp_port_message_codeset,
        _dart_gp_port_message_codeset>('gp_port_message_codeset');
    return _gp_port_message_codeset(
      arg0,
    );
  }

  _dart_gp_port_message_codeset _gp_port_message_codeset;

  int gp_port_library_type() {
    _gp_port_library_type ??= _dylib.lookupFunction<_c_gp_port_library_type,
        _dart_gp_port_library_type>('gp_port_library_type');
    return _gp_port_library_type();
  }

  _dart_gp_port_library_type _gp_port_library_type;

  int gp_port_library_list(
    ffi.Pointer<ffi.Int32> list,
  ) {
    _gp_port_library_list ??= _dylib.lookupFunction<_c_gp_port_library_list,
        _dart_gp_port_library_list>('gp_port_library_list');
    return _gp_port_library_list(
      list,
    );
  }

  _dart_gp_port_library_list _gp_port_library_list;

  ffi.Pointer<GPPortOperations> gp_port_library_operations() {
    _gp_port_library_operations ??= _dylib.lookupFunction<
        _c_gp_port_library_operations,
        _dart_gp_port_library_operations>('gp_port_library_operations');
    return _gp_port_library_operations();
  }

  _dart_gp_port_library_operations _gp_port_library_operations;

  int gp_log_add_func(
    int level,
    ffi.Pointer<ffi.NativeFunction<GPLogFunc>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gp_log_add_func ??=
        _dylib.lookupFunction<_c_gp_log_add_func, _dart_gp_log_add_func>(
            'gp_log_add_func');
    return _gp_log_add_func(
      level,
      func,
      data,
    );
  }

  _dart_gp_log_add_func _gp_log_add_func;

  int gp_log_remove_func(
    int id,
  ) {
    _gp_log_remove_func ??=
        _dylib.lookupFunction<_c_gp_log_remove_func, _dart_gp_log_remove_func>(
            'gp_log_remove_func');
    return _gp_log_remove_func(
      id,
    );
  }

  _dart_gp_log_remove_func _gp_log_remove_func;

  void gp_log(
    int level,
    ffi.Pointer<ffi.Int8> domain,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_log ??= _dylib.lookupFunction<_c_gp_log, _dart_gp_log>('gp_log');
    return _gp_log(
      level,
      domain,
      format,
    );
  }

  _dart_gp_log _gp_log;

  void gp_log_with_source_location(
    int level,
    ffi.Pointer<ffi.Int8> file,
    int line,
    ffi.Pointer<ffi.Int8> func,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_log_with_source_location ??= _dylib.lookupFunction<
        _c_gp_log_with_source_location,
        _dart_gp_log_with_source_location>('gp_log_with_source_location');
    return _gp_log_with_source_location(
      level,
      file,
      line,
      func,
      format,
    );
  }

  _dart_gp_log_with_source_location _gp_log_with_source_location;

  void gp_logv(
    int level,
    ffi.Pointer<ffi.Int8> domain,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<ffi.Int8> args,
  ) {
    _gp_logv ??= _dylib.lookupFunction<_c_gp_logv, _dart_gp_logv>('gp_logv');
    return _gp_logv(
      level,
      domain,
      format,
      args,
    );
  }

  _dart_gp_logv _gp_logv;

  void gp_log_data(
    ffi.Pointer<ffi.Int8> domain,
    ffi.Pointer<ffi.Int8> data,
    int size,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_log_data ??=
        _dylib.lookupFunction<_c_gp_log_data, _dart_gp_log_data>('gp_log_data');
    return _gp_log_data(
      domain,
      data,
      size,
      format,
    );
  }

  _dart_gp_log_data _gp_log_data;

  ffi.Pointer<ffi.Int8> gp_port_result_as_string(
    int result,
  ) {
    _gp_port_result_as_string ??= _dylib.lookupFunction<
        _c_gp_port_result_as_string,
        _dart_gp_port_result_as_string>('gp_port_result_as_string');
    return _gp_port_result_as_string(
      result,
    );
  }

  _dart_gp_port_result_as_string _gp_port_result_as_string;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> gp_port_library_version(
    int verbose,
  ) {
    _gp_port_library_version ??= _dylib.lookupFunction<
        _c_gp_port_library_version,
        _dart_gp_port_library_version>('gp_port_library_version');
    return _gp_port_library_version(
      verbose,
    );
  }

  _dart_gp_port_library_version _gp_port_library_version;

  int gp_port_new(
    ffi.Pointer<ffi.Pointer<GPPort>> port,
  ) {
    _gp_port_new ??=
        _dylib.lookupFunction<_c_gp_port_new, _dart_gp_port_new>('gp_port_new');
    return _gp_port_new(
      port,
    );
  }

  _dart_gp_port_new _gp_port_new;

  int gp_port_free(
    ffi.Pointer<GPPort> port,
  ) {
    _gp_port_free ??= _dylib
        .lookupFunction<_c_gp_port_free, _dart_gp_port_free>('gp_port_free');
    return _gp_port_free(
      port,
    );
  }

  _dart_gp_port_free _gp_port_free;

  int gp_port_set_info(
    ffi.Pointer<GPPort> port,
    int info,
  ) {
    _gp_port_set_info ??=
        _dylib.lookupFunction<_c_gp_port_set_info, _dart_gp_port_set_info>(
            'gp_port_set_info');
    return _gp_port_set_info(
      port,
      info,
    );
  }

  _dart_gp_port_set_info _gp_port_set_info;

  int gp_port_get_info(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int32> info,
  ) {
    _gp_port_get_info ??=
        _dylib.lookupFunction<_c_gp_port_get_info, _dart_gp_port_get_info>(
            'gp_port_get_info');
    return _gp_port_get_info(
      port,
      info,
    );
  }

  _dart_gp_port_get_info _gp_port_get_info;

  int gp_port_open(
    ffi.Pointer<GPPort> port,
  ) {
    _gp_port_open ??= _dylib
        .lookupFunction<_c_gp_port_open, _dart_gp_port_open>('gp_port_open');
    return _gp_port_open(
      port,
    );
  }

  _dart_gp_port_open _gp_port_open;

  int gp_port_close(
    ffi.Pointer<GPPort> port,
  ) {
    _gp_port_close ??= _dylib
        .lookupFunction<_c_gp_port_close, _dart_gp_port_close>('gp_port_close');
    return _gp_port_close(
      port,
    );
  }

  _dart_gp_port_close _gp_port_close;

  int gp_port_reset(
    ffi.Pointer<GPPort> port,
  ) {
    _gp_port_reset ??= _dylib
        .lookupFunction<_c_gp_port_reset, _dart_gp_port_reset>('gp_port_reset');
    return _gp_port_reset(
      port,
    );
  }

  _dart_gp_port_reset _gp_port_reset;

  int gp_port_write(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_port_write ??= _dylib
        .lookupFunction<_c_gp_port_write, _dart_gp_port_write>('gp_port_write');
    return _gp_port_write(
      port,
      data,
      size,
    );
  }

  _dart_gp_port_write _gp_port_write;

  int gp_port_read(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_port_read ??= _dylib
        .lookupFunction<_c_gp_port_read, _dart_gp_port_read>('gp_port_read');
    return _gp_port_read(
      port,
      data,
      size,
    );
  }

  _dart_gp_port_read _gp_port_read;

  int gp_port_check_int(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_port_check_int ??=
        _dylib.lookupFunction<_c_gp_port_check_int, _dart_gp_port_check_int>(
            'gp_port_check_int');
    return _gp_port_check_int(
      port,
      data,
      size,
    );
  }

  _dart_gp_port_check_int _gp_port_check_int;

  int gp_port_check_int_fast(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int8> data,
    int size,
  ) {
    _gp_port_check_int_fast ??= _dylib.lookupFunction<_c_gp_port_check_int_fast,
        _dart_gp_port_check_int_fast>('gp_port_check_int_fast');
    return _gp_port_check_int_fast(
      port,
      data,
      size,
    );
  }

  _dart_gp_port_check_int_fast _gp_port_check_int_fast;

  int gp_port_get_timeout(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int32> timeout,
  ) {
    _gp_port_get_timeout ??= _dylib.lookupFunction<_c_gp_port_get_timeout,
        _dart_gp_port_get_timeout>('gp_port_get_timeout');
    return _gp_port_get_timeout(
      port,
      timeout,
    );
  }

  _dart_gp_port_get_timeout _gp_port_get_timeout;

  int gp_port_set_timeout(
    ffi.Pointer<GPPort> port,
    int timeout,
  ) {
    _gp_port_set_timeout ??= _dylib.lookupFunction<_c_gp_port_set_timeout,
        _dart_gp_port_set_timeout>('gp_port_set_timeout');
    return _gp_port_set_timeout(
      port,
      timeout,
    );
  }

  _dart_gp_port_set_timeout _gp_port_set_timeout;

  int gp_port_get_pin(
    ffi.Pointer<GPPort> port,
    int pin,
    ffi.Pointer<ffi.Int32> level,
  ) {
    _gp_port_get_pin ??=
        _dylib.lookupFunction<_c_gp_port_get_pin, _dart_gp_port_get_pin>(
            'gp_port_get_pin');
    return _gp_port_get_pin(
      port,
      pin,
      level,
    );
  }

  _dart_gp_port_get_pin _gp_port_get_pin;

  int gp_port_set_pin(
    ffi.Pointer<GPPort> port,
    int pin,
    int level,
  ) {
    _gp_port_set_pin ??=
        _dylib.lookupFunction<_c_gp_port_set_pin, _dart_gp_port_set_pin>(
            'gp_port_set_pin');
    return _gp_port_set_pin(
      port,
      pin,
      level,
    );
  }

  _dart_gp_port_set_pin _gp_port_set_pin;

  int gp_port_send_break(
    ffi.Pointer<GPPort> port,
    int duration,
  ) {
    _gp_port_send_break ??=
        _dylib.lookupFunction<_c_gp_port_send_break, _dart_gp_port_send_break>(
            'gp_port_send_break');
    return _gp_port_send_break(
      port,
      duration,
    );
  }

  _dart_gp_port_send_break _gp_port_send_break;

  int gp_port_flush(
    ffi.Pointer<GPPort> port,
    int direction,
  ) {
    _gp_port_flush ??= _dylib
        .lookupFunction<_c_gp_port_flush, _dart_gp_port_flush>('gp_port_flush');
    return _gp_port_flush(
      port,
      direction,
    );
  }

  _dart_gp_port_flush _gp_port_flush;

  int gp_port_usb_find_device(
    ffi.Pointer<GPPort> port,
    int idvendor,
    int idproduct,
  ) {
    _gp_port_usb_find_device ??= _dylib.lookupFunction<
        _c_gp_port_usb_find_device,
        _dart_gp_port_usb_find_device>('gp_port_usb_find_device');
    return _gp_port_usb_find_device(
      port,
      idvendor,
      idproduct,
    );
  }

  _dart_gp_port_usb_find_device _gp_port_usb_find_device;

  int gp_port_usb_find_device_by_class(
    ffi.Pointer<GPPort> port,
    int mainclass,
    int subclass,
    int protocol,
  ) {
    _gp_port_usb_find_device_by_class ??= _dylib.lookupFunction<
            _c_gp_port_usb_find_device_by_class,
            _dart_gp_port_usb_find_device_by_class>(
        'gp_port_usb_find_device_by_class');
    return _gp_port_usb_find_device_by_class(
      port,
      mainclass,
      subclass,
      protocol,
    );
  }

  _dart_gp_port_usb_find_device_by_class _gp_port_usb_find_device_by_class;

  int gp_port_usb_clear_halt(
    ffi.Pointer<GPPort> port,
    int ep,
  ) {
    _gp_port_usb_clear_halt ??= _dylib.lookupFunction<_c_gp_port_usb_clear_halt,
        _dart_gp_port_usb_clear_halt>('gp_port_usb_clear_halt');
    return _gp_port_usb_clear_halt(
      port,
      ep,
    );
  }

  _dart_gp_port_usb_clear_halt _gp_port_usb_clear_halt;

  int gp_port_usb_msg_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_write ??= _dylib.lookupFunction<_c_gp_port_usb_msg_write,
        _dart_gp_port_usb_msg_write>('gp_port_usb_msg_write');
    return _gp_port_usb_msg_write(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_write _gp_port_usb_msg_write;

  int gp_port_usb_msg_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_read ??= _dylib.lookupFunction<_c_gp_port_usb_msg_read,
        _dart_gp_port_usb_msg_read>('gp_port_usb_msg_read');
    return _gp_port_usb_msg_read(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_read _gp_port_usb_msg_read;

  int gp_port_usb_msg_interface_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_interface_write ??= _dylib.lookupFunction<
            _c_gp_port_usb_msg_interface_write,
            _dart_gp_port_usb_msg_interface_write>(
        'gp_port_usb_msg_interface_write');
    return _gp_port_usb_msg_interface_write(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_interface_write _gp_port_usb_msg_interface_write;

  int gp_port_usb_msg_interface_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_interface_read ??= _dylib.lookupFunction<
        _c_gp_port_usb_msg_interface_read,
        _dart_gp_port_usb_msg_interface_read>('gp_port_usb_msg_interface_read');
    return _gp_port_usb_msg_interface_read(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_interface_read _gp_port_usb_msg_interface_read;

  int gp_port_usb_msg_class_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_class_write ??= _dylib.lookupFunction<
        _c_gp_port_usb_msg_class_write,
        _dart_gp_port_usb_msg_class_write>('gp_port_usb_msg_class_write');
    return _gp_port_usb_msg_class_write(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_class_write _gp_port_usb_msg_class_write;

  int gp_port_usb_msg_class_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Int8> bytes,
    int size,
  ) {
    _gp_port_usb_msg_class_read ??= _dylib.lookupFunction<
        _c_gp_port_usb_msg_class_read,
        _dart_gp_port_usb_msg_class_read>('gp_port_usb_msg_class_read');
    return _gp_port_usb_msg_class_read(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  _dart_gp_port_usb_msg_class_read _gp_port_usb_msg_class_read;

  int gp_port_seek(
    ffi.Pointer<GPPort> port,
    int offset,
    int whence,
  ) {
    _gp_port_seek ??= _dylib
        .lookupFunction<_c_gp_port_seek, _dart_gp_port_seek>('gp_port_seek');
    return _gp_port_seek(
      port,
      offset,
      whence,
    );
  }

  _dart_gp_port_seek _gp_port_seek;

  int gp_port_send_scsi_cmd(
    ffi.Pointer<GPPort> port,
    int to_dev,
    ffi.Pointer<ffi.Int8> cmd,
    int cmd_size,
    ffi.Pointer<ffi.Int8> sense,
    int sense_size,
    ffi.Pointer<ffi.Int8> data,
    int data_size,
  ) {
    _gp_port_send_scsi_cmd ??= _dylib.lookupFunction<_c_gp_port_send_scsi_cmd,
        _dart_gp_port_send_scsi_cmd>('gp_port_send_scsi_cmd');
    return _gp_port_send_scsi_cmd(
      port,
      to_dev,
      cmd,
      cmd_size,
      sense,
      sense_size,
      data,
      data_size,
    );
  }

  _dart_gp_port_send_scsi_cmd _gp_port_send_scsi_cmd;

  int gp_port_set_error(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gp_port_set_error ??=
        _dylib.lookupFunction<_c_gp_port_set_error, _dart_gp_port_set_error>(
            'gp_port_set_error');
    return _gp_port_set_error(
      port,
      format,
    );
  }

  _dart_gp_port_set_error _gp_port_set_error;

  ffi.Pointer<ffi.Int8> gp_port_get_error(
    ffi.Pointer<GPPort> port,
  ) {
    _gp_port_get_error ??=
        _dylib.lookupFunction<_c_gp_port_get_error, _dart_gp_port_get_error>(
            'gp_port_get_error');
    return _gp_port_get_error(
      port,
    );
  }

  _dart_gp_port_get_error _gp_port_get_error;
}

/// Current implementation status of the camera driver.
abstract class CameraDriverStatus {
  /// < Driver is production ready.
  static const int GP_DRIVER_STATUS_PRODUCTION = 0;

  /// < Driver is beta quality.
  static const int GP_DRIVER_STATUS_TESTING = 1;

  /// < Driver is alpha quality and might even not work.
  static const int GP_DRIVER_STATUS_EXPERIMENTAL = 2;

  /// < Driver is no longer recommended to use and will be removed.
  static const int GP_DRIVER_STATUS_DEPRECATED = 3;
}

/// Type of the device represented. Currently we have Still Cameras
/// and MTP Audio Players.
abstract class GphotoDeviceType {
  /// < Traditional still camera
  static const int GP_DEVICE_STILL_CAMERA = 0;

  /// < Audio player
  static const int GP_DEVICE_AUDIO_PLAYER = 1;
}

/// A bitmask of remote control related operations of the device.
/// Some drivers might support additional dynamic capabilities (like the PTP driver).
abstract class CameraOperation {
  /// < No remote control operation supported.
  static const int GP_OPERATION_NONE = 0;

  /// < Capturing images supported.
  static const int GP_OPERATION_CAPTURE_IMAGE = 1;

  /// < Capturing videos supported.
  static const int GP_OPERATION_CAPTURE_VIDEO = 2;

  /// < Capturing audio supported.
  static const int GP_OPERATION_CAPTURE_AUDIO = 4;

  /// < Capturing image previews supported.
  static const int GP_OPERATION_CAPTURE_PREVIEW = 8;

  /// < Camera and Driver configuration supported.
  static const int GP_OPERATION_CONFIG = 16;

  /// < Camera can trigger capture and wait for events.
  static const int GP_OPERATION_TRIGGER_CAPTURE = 32;
}

/// A bitmask of image related operations of the device.
abstract class CameraFileOperation {
  /// < No special file operations, just download.
  static const int GP_FILE_OPERATION_NONE = 0;

  /// < Deletion of files is possible.
  static const int GP_FILE_OPERATION_DELETE = 2;

  /// < Previewing viewfinder content is possible.
  static const int GP_FILE_OPERATION_PREVIEW = 8;

  /// < Raw retrieval is possible (used by non-JPEG cameras)
  static const int GP_FILE_OPERATION_RAW = 16;

  /// < Audio retrieval is possible.
  static const int GP_FILE_OPERATION_AUDIO = 32;

  /// < EXIF retrieval is possible.
  static const int GP_FILE_OPERATION_EXIF = 64;
}

/// A bitmask of filesystem related operations of the device.
abstract class CameraFolderOperation {
  /// < No special filesystem operation.
  static const int GP_FOLDER_OPERATION_NONE = 0;

  /// < Deletion of all files on the device.
  static const int GP_FOLDER_OPERATION_DELETE_ALL = 1;

  /// < Upload of files to the device possible.
  static const int GP_FOLDER_OPERATION_PUT_FILE = 2;

  /// < Making directories on the device possible.
  static const int GP_FOLDER_OPERATION_MAKE_DIR = 4;

  /// < Removing directories from the device possible.
  static const int GP_FOLDER_OPERATION_REMOVE_DIR = 8;
}

/// \brief Describes the properties of a specific camera.
///
/// The internals of this structures are used extensively by the
/// camlibs, but the status regarding use by frontends is questionable.
class CameraAbilities extends ffi.Struct {}

class _CameraAbilitiesList extends ffi.Struct {}

class _Camera extends ffi.Struct {}

/// \brief CameraText structure used in various functions.
///
/// A text structure containing translated text returned
/// by various functions (about, manual, summary). You should
/// not assume a size.
class CameraText extends ffi.Struct {}

/// \brief A structure created by the capture operation.
///
/// A structure containing the folder and filename of an object
/// after a successful capture and is passed as reference to the
/// gp_camera_capture() function.
class CameraFilePath extends ffi.Struct {}

/// \brief Type of the capture to do.
///
/// Specifies the type of capture the user wants to do with the
/// gp_camera_capture() function.
abstract class CameraCaptureType {
  /// < \brief Capture an image.
  static const int GP_CAPTURE_IMAGE = 0;

  /// < \brief Capture a movie.
  static const int GP_CAPTURE_MOVIE = 1;

  /// < \brief Capture audio.
  static const int GP_CAPTURE_SOUND = 2;
}

/// \brief Specify what event we received from the camera.
///
/// Used by gp_camera_wait_for_event() to specify what
/// event happened on the camera.
abstract class CameraEventType {
  /// < unknown and unhandled event. argument is a char* or NULL
  static const int GP_EVENT_UNKNOWN = 0;

  /// < timeout, no arguments
  static const int GP_EVENT_TIMEOUT = 1;

  /// < CameraFilePath* = file path on camfs
  static const int GP_EVENT_FILE_ADDED = 2;

  /// < CameraFilePath* = folder on camfs
  static const int GP_EVENT_FOLDER_ADDED = 3;

  /// < last capture is complete
  static const int GP_EVENT_CAPTURE_COMPLETE = 4;

  /// < CameraFilePath* = file path on camfs
  static const int GP_EVENT_FILE_CHANGED = 5;
}

/// \brief Various camera specific functions.
///
/// This structure contains various pointers to functions that apply to
/// the camera itself, and not the filesystem (which is handled by the
/// filesystem functions). Set the ones you want to provide, leave the rest
/// unset.
///
/// This structure should only used by the driver itself, the frontend
/// should use the gp_camera_xxx wrapper functions for it, who handle
/// opening and locking around those hooks.
class CameraFunctions extends ffi.Struct {
  /// < \brief Function called before each camera operation.
  ffi.Pointer<ffi.NativeFunction<CameraPrePostFunc>> pre_func;

  /// < \brief Function called after each camera operation.
  ffi.Pointer<ffi.NativeFunction<CameraPrePostFunc>> post_func;

  /// < \brief Function called on closing the camera.
  ffi.Pointer<ffi.NativeFunction<CameraExitFunc>> exit;

  /// < \brief Called for requesting the configuration widgets.
  ffi.Pointer<ffi.NativeFunction<CameraGetConfigFunc>> get_config;

  /// < \brief Called after a configuration was changed
  ffi.Pointer<ffi.NativeFunction<CameraSetConfigFunc>> set_config;

  /// < \brief Called for listing the available configuration widgets.
  ffi.Pointer<ffi.NativeFunction<CameraListConfigFunc>> list_config;

  /// < \brief Called for requesteing a single widget.
  ffi.Pointer<ffi.NativeFunction<CameraGetSingleConfigFunc>> get_single_config;

  /// < \brief Called for setting a single configuration widget.
  ffi.Pointer<ffi.NativeFunction<CameraSetSingleConfigFunc>> set_single_config;

  /// < \brief Remote control the camera to capture
  ffi.Pointer<ffi.NativeFunction<CameraCaptureFunc>> capture;

  /// < \brief Remote control the camera to trigger capture
  ffi.Pointer<ffi.NativeFunction<CameraTriggerCaptureFunc>> trigger_capture;

  /// < \brief Preview viewfinder content.
  ffi.Pointer<ffi.NativeFunction<CameraCapturePreviewFunc>> capture_preview;

  /// < \brief Give a summary about the current camera status, translated.
  ffi.Pointer<ffi.NativeFunction<CameraSummaryFunc>> summary;

  /// < \brief Give a brief manual about any specific items a user has to know, translated.
  ffi.Pointer<ffi.NativeFunction<CameraManualFunc>> manual;

  /// < \brief A little About text, including authors and credits.
  ffi.Pointer<ffi.NativeFunction<CameraAboutFunc>> about;

  /// < \brief Wait for a specific event from the camera
  ffi.Pointer<ffi.NativeFunction<CameraWaitForEvent>> wait_for_event;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved1;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved2;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved3;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved4;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved5;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved6;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved7;

  /// < \brief reserved for future use
  ffi.Pointer<ffi.Void> reserved8;
}

class _CameraPrivateLibrary extends ffi.Struct {}

class _CameraPrivateCore extends ffi.Struct {}

class _GPContext extends ffi.Struct {}

/// \brief Return codes that can be returned by progress handling.
///
/// An application can return special values back to the libgphoto2
/// progress callback handling functions. If "Cancel" is selected,
/// libgphoto2 and the camera driver will try to cancel transfer.
abstract class GPContextFeedback {
  /// < Everything ok... proceed.
  static const int GP_CONTEXT_FEEDBACK_OK = 0;

  /// < Please cancel the current transfer if possible.
  static const int GP_CONTEXT_FEEDBACK_CANCEL = 1;
}

class __crt_locale_data_public extends ffi.Struct {
  ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  int _locale_mb_cur_max;

  @ffi.Uint32()
  int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Struct {}

class __crt_multibyte_data extends ffi.Struct {}

class __crt_locale_pointers extends ffi.Struct {
  ffi.Pointer<__crt_locale_data> locinfo;

  ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  int _Wchar;

  @ffi.Uint16()
  int _Byte;

  @ffi.Uint16()
  int _State;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;
}

class _timespec32 extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class _timespec64 extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

/// \brief The type of view on the specified file.
///
/// Specifies the file of the current file, usually passed
/// to the gp_camera_file_get() and gp_camera_file_put()
/// functions. This is useful for multiple views of one
/// file, like that an single image file has "raw", "normal",
/// "exif" and "preview" views, or a media file has "normal"
/// and "metadata" file views.
abstract class CameraFileType {
  /// < A preview of an image.
  static const int GP_FILE_TYPE_PREVIEW = 0;

  /// < The regular normal data of a file.
  static const int GP_FILE_TYPE_NORMAL = 1;

  /// < The raw mode of a file, for instance the raw bayer data for cameras
  /// where postprocessing is done in the driver. The RAW files of modern
  /// DSLRs are GP_FILE_TYPE_NORMAL usually.
  static const int GP_FILE_TYPE_RAW = 2;

  /// < The audio view of a file. Perhaps an embedded comment or similar.
  static const int GP_FILE_TYPE_AUDIO = 3;

  /// < The embedded EXIF data of an image.
  static const int GP_FILE_TYPE_EXIF = 4;

  /// < The metadata of a file, like Metadata of files on MTP devices.
  static const int GP_FILE_TYPE_METADATA = 5;
}

/// \brief File storage type.
///
/// The file storage type. Only used internally for now, but might
/// be exposed later on. See gp_file_new() and gp_file_new_from_fd().
abstract class CameraFileAccessType {
  /// < File is in system memory.
  static const int GP_FILE_ACCESSTYPE_MEMORY = 0;

  /// < File is associated with a UNIX filedescriptor.
  static const int GP_FILE_ACCESSTYPE_FD = 1;

  /// < File is associated with a programmatic handler.
  static const int GP_FILE_ACCESSTYPE_HANDLER = 2;
}

class CameraFileHandler extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> size;

  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> write;
}

class _CameraFile extends ffi.Struct {}

/// \brief Bitmask on what fields are set in the CameraFileInfo structure.
///
/// Bitmask to mark up which fields are set in the CameraFileInfo
/// structure. The other fields might be uninitialized.
/// If you set information via gp_camera_file_set_info() you
/// need to set those flags. If you retrieve information via
/// gp_camera_file_get_info() you need to check those flags.
/// They are separate for both "normal" and "preview" parts
/// and are mostly image related.
abstract class CameraFileInfoFields {
  /// < \brief No fields set.
  static const int GP_FILE_INFO_NONE = 0;

  /// < \brief The MIME type is set.
  static const int GP_FILE_INFO_TYPE = 1;

  /// < \brief The filesize is set.
  static const int GP_FILE_INFO_SIZE = 4;

  /// < \brief The width is set.
  static const int GP_FILE_INFO_WIDTH = 8;

  /// < \brief The height is set.
  static const int GP_FILE_INFO_HEIGHT = 16;

  /// < \brief The access permissions are set.
  static const int GP_FILE_INFO_PERMISSIONS = 32;

  /// < \brief The status is set (downloaded).
  static const int GP_FILE_INFO_STATUS = 64;

  /// < \brief The modification time is set.
  static const int GP_FILE_INFO_MTIME = 128;

  /// < \brief All possible fields set. Internal.
  static const int GP_FILE_INFO_ALL = 255;
}

/// \brief Bitmask containing the file permission flags.
///
/// Possible flag values of the permission entry in the file information.
abstract class CameraFilePermissions {
  /// < \brief No permissions.
  static const int GP_FILE_PERM_NONE = 0;

  /// < \brief Read permissions.
  static const int GP_FILE_PERM_READ = 1;

  /// < \brief Write permissions
  static const int GP_FILE_PERM_DELETE = 2;

  /// < \brief Internal.
  static const int GP_FILE_PERM_ALL = 255;
}

/// \brief Possible status values.
///
/// Bitmask of possible stati. Currently only download is supported.
abstract class CameraFileStatus {
  /// < File is not downloaded.
  static const int GP_FILE_STATUS_NOT_DOWNLOADED = 0;

  /// < File is already downloaded.
  static const int GP_FILE_STATUS_DOWNLOADED = 1;
}

/// \brief File information of a regular file.
///
/// Contains information a regular file with fields being
/// set depending on the bitmask in the fields member.
class CameraFileInfoFile extends ffi.Struct {}

/// \brief File information of a preview file.
///
/// Contains information of a preview file with fields being
/// set depending on the bitmask in the fields member.
class CameraFileInfoPreview extends ffi.Struct {}

/// \brief File information of an audio file.
///
/// Contains information of an audio file with fields being
/// set depending on the bitmask in the fields member.
class CameraFileInfoAudio extends ffi.Struct {}

/// \brief File information structure.
///
/// Contains the normal, preview and audio file information structures
/// for a specific file.
class CameraFileInfo extends ffi.Struct {}

/// \brief Storage information flags.
///
/// Bitmask to specify which entries of the filesystem
/// storage information is set.
abstract class CameraStorageInfoFields {
  /// < \brief The base directory.
  /// Usually / if just 1 storage is attached.
  static const int GP_STORAGEINFO_BASE = 1;

  /// < \brief Label of the filesystem.
  /// Could also be a DOS label.
  static const int GP_STORAGEINFO_LABEL = 2;

  /// < \brief More verbose description.
  static const int GP_STORAGEINFO_DESCRIPTION = 4;

  /// < \brief Access permissions.
  static const int GP_STORAGEINFO_ACCESS = 8;

  /// < \brief Hardware type.
  static const int GP_STORAGEINFO_STORAGETYPE = 16;

  /// < \brief Filesystem type.
  static const int GP_STORAGEINFO_FILESYSTEMTYPE = 32;

  /// < \brief Maximum capacity in kbytes
  static const int GP_STORAGEINFO_MAXCAPACITY = 64;

  /// < \brief Free space in kbytes.
  static const int GP_STORAGEINFO_FREESPACEKBYTES = 128;

  /// < \brief Free space in images.
  static const int GP_STORAGEINFO_FREESPACEIMAGES = 256;
}

/// \brief Hardware storage types.
///
/// Type of hardware this storage is on. The types and values
/// are the same as the PTP standard uses (PTP_ST_xxx).
abstract class CameraStorageType {
  /// < \brief Unknown storage type.
  static const int GP_STORAGEINFO_ST_UNKNOWN = 0;

  /// < \brief A fixed ROM storage.
  static const int GP_STORAGEINFO_ST_FIXED_ROM = 1;

  /// < \brief A removable ROM storage.
  static const int GP_STORAGEINFO_ST_REMOVABLE_ROM = 2;

  /// < \brief A fixed RAM storage. (e.g. SDRAM)
  static const int GP_STORAGEINFO_ST_FIXED_RAM = 3;

  /// < \brief A removable RAM storage. (any kind of cards etc)
  static const int GP_STORAGEINFO_ST_REMOVABLE_RAM = 4;
}

/// \brief Storage access modes.
///
/// The modes we can access the storage with. Uses the same
/// types and values as the PTP standard (PTP_AC_xxx).
abstract class CameraStorageAccessType {
  /// < \brief Storage is Read / Write.
  static const int GP_STORAGEINFO_AC_READWRITE = 0;

  /// < \brief Storage is Ready Only.
  static const int GP_STORAGEINFO_AC_READONLY = 1;

  /// < \brief Storage is Ready Only, but allows Delete.
  static const int GP_STORAGEINFO_AC_READONLY_WITH_DELETE = 2;
}

/// \brief Filesystem hierarchy types.
///
/// The type of the filesystem hierarchy the devices uses.
/// Same types and values as the PTP standard defines (PTP_FST_xxx).
abstract class CameraStorageFilesystemType {
  /// < \brief Undefined or unknown filesystem hierarchy.
  static const int GP_STORAGEINFO_FST_UNDEFINED = 0;

  /// < \brief Generic flat storage (all in 1 directory).
  static const int GP_STORAGEINFO_FST_GENERICFLAT = 1;

  /// < \brief Generic tree hierarchy.
  static const int GP_STORAGEINFO_FST_GENERICHIERARCHICAL = 2;

  /// < \brief DCIM style storage.
  static const int GP_STORAGEINFO_FST_DCF = 3;
}

/// \brief Storage information structue.
///
/// This structure contains the information of a specific camera storage.
/// Only the members as specified by the \a fields member are valid.
class CameraStorageInformation extends ffi.Struct {}

class _CameraFilesystem extends ffi.Struct {}

class _CameraFilesystemFuncs extends ffi.Struct {}

class _CameraList extends ffi.Struct {}

class _CameraWidget extends ffi.Struct {}

/// \brief Type of the widget to be created.
///
/// The actual widget type we want to create. The type of the value
/// it supports depends on this type.
abstract class CameraWidgetType {
  /// < \brief Window widget
  /// This is the toplevel configuration widget. It should likely contain multiple #GP_WIDGET_SECTION entries.
  static const int GP_WIDGET_WINDOW = 0;

  /// < \brief Section widget (think Tab)
  static const int GP_WIDGET_SECTION = 1;

  /// < \brief Text widget.
  static const int GP_WIDGET_TEXT = 2;

  /// < \brief Slider widget.
  static const int GP_WIDGET_RANGE = 3;

  /// < \brief Toggle widget (think check box)
  static const int GP_WIDGET_TOGGLE = 4;

  /// < \brief Radio button widget.
  static const int GP_WIDGET_RADIO = 5;

  /// < \brief Menu widget (same as RADIO).
  static const int GP_WIDGET_MENU = 6;

  /// < \brief Button press widget.
  static const int GP_WIDGET_BUTTON = 7;

  /// < \brief Date entering widget.
  static const int GP_WIDGET_DATE = 8;
}

/// \brief how the bayer CCD array is laid out
///
/// This enumeration defines how the CCD bayer array is laid out.
abstract class BayerTile {
  /// < \brief raster is RG,GN
  static const int BAYER_TILE_RGGB = 0;

  /// < \brief raster is GR,BG
  static const int BAYER_TILE_GRBG = 1;

  /// < \brief raster is BG,GR
  static const int BAYER_TILE_BGGR = 2;

  /// < \brief raster is RG,GB
  static const int BAYER_TILE_GBRG = 3;

  /// < \brief scanline order: R1,G1,R2,G2,...,G1,B1,G2,B2,...
  static const int BAYER_TILE_RGGB_INTERLACED = 4;

  /// < \brief scanline order: G1,R1,R2,G2,...,B1,G1,B2,G2,...
  static const int BAYER_TILE_GRBG_INTERLACED = 5;

  /// < \brief scanline order: B1,G1,R2,G2,...,G1,R1,G2,R2,...
  static const int BAYER_TILE_BGGR_INTERLACED = 6;

  /// < \brief scanline order: G1,B1,G2,B2,...,R1,G1,R2,G2,...
  static const int BAYER_TILE_GBRG_INTERLACED = 7;
}

abstract class jpegmarker {
  static const int JPEG_START = 216;
  static const int JPEG_COMMENT = 254;
  static const int JPEG_APPO = 224;
  static const int JPEG_QUANTIZATION = 219;
  static const int JPEG_HUFFMAN = 196;
  static const int JPEG_SOFC0 = 192;
  static const int JPEG_SSSEAHAL = 218;
  static const int JPEG_EOI = 217;
}

class chunk extends ffi.Struct {
  @ffi.Int32()
  int size;

  ffi.Pointer<ffi.Uint8> data;
}

class jpeg extends ffi.Struct {}

/// \brief The gphoto port type.
///
/// Enumeration specifying the port type.
/// The enum is providing bitmasks, but most code uses it as
/// just the one specific values.
abstract class GPPortType {
  /// < \brief No specific type associated.
  static const int GP_PORT_NONE = 0;

  /// < \brief Serial port.
  static const int GP_PORT_SERIAL = 1;

  /// < \brief USB port.
  static const int GP_PORT_USB = 4;

  /// < \brief Disk / local mountpoint port.
  static const int GP_PORT_DISK = 8;

  /// < \brief PTP/IP port.
  static const int GP_PORT_PTPIP = 16;

  /// < \brief Direct IO to an usb mass storage device.
  static const int GP_PORT_USB_DISK_DIRECT = 32;

  /// < \brief USB Mass Storage raw SCSI port.
  static const int GP_PORT_USB_SCSI = 64;

  /// < \brief generic IP address port.
  static const int GP_PORT_IP = 128;
}

/// \brief Information about the current port.
///
/// Specific information about the current port. Usually taken from the
/// "--port=XXXX" setting from the frontend.
///
/// This is not to be confused with the driver configurable port settings
/// in \ref GPPortSettings.
class _GPPortInfo extends ffi.Struct {}

class _GPPortInfoList extends ffi.Struct {}

/// \brief The port operations
///
/// These operations are to be implemented and set by the port library,
/// which drives the lowlevel protocol (serial, usb, etc.).
///
/// They are acessed using the accessor functions, like gp_port_open(),
/// gp_port_read() and gp_port_write().
class GPPortOperations extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> init;

  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> exit;

  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> open;

  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> close;

  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> check_int;

  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> write;

  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> update;

  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> get_pin;

  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> set_pin;

  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> send_break;

  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> flush;

  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> find_device;

  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> find_device_by_class;

  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> clear_halt;

  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> msg_write;

  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> msg_read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> msg_interface_write;

  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> msg_interface_read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> msg_class_write;

  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> msg_class_read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> seek;

  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> send_scsi_cmd;

  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> reset;
}

/// \brief Logging level
/// Specifies the logging severity level.
abstract class GPLogLevel {
  /// < \brief Log message is an error information.
  static const int GP_LOG_ERROR = 0;

  /// < \brief Log message is an verbose debug information.
  static const int GP_LOG_VERBOSE = 1;

  /// < \brief Log message is an debug information.
  static const int GP_LOG_DEBUG = 2;

  /// < \brief Log message is a data hex dump.
  static const int GP_LOG_DATA = 3;
}

abstract class GPVersionVerbosity {
  static const int GP_VERSION_SHORT = 0;
  static const int GP_VERSION_VERBOSE = 1;
}

/// \brief Serial parity
///
/// Parity of the serial port.
abstract class GPPortSerialParity {
  /// < \brief Parity is off (disabled)
  static const int GP_PORT_SERIAL_PARITY_OFF = 0;

  /// < \brief Parity is even.
  static const int GP_PORT_SERIAL_PARITY_EVEN = 1;

  /// < \brief Parity is odd.
  static const int GP_PORT_SERIAL_PARITY_ODD = 2;
}

/// \brief Port settings for serial ports.
class GPPortSettingsSerial extends ffi.Struct {}

/// \brief Port settings for USB ports.
class GPPortSettingsUSB extends ffi.Struct {}

/// \brief Port settings for USB mass storage direct IO ports.
class GPPortSettingsUsbDiskDirect extends ffi.Struct {}

/// \brief Port settings for USB Mass Storage raw SCSI ports.
class GPPortSettingsUsbScsi extends ffi.Struct {}

class _GPPortPrivateLibrary extends ffi.Struct {}

class _GPPortPrivateCore extends ffi.Struct {}

/// \brief The GPhoto port structure.
///
/// This structure tracks the physical connection of the device.
/// It can correspond the various methods of lowlevel access, serial
/// usb and others and abstracts them as much as possible.
///
/// Frontends should consider this structure opaque and only use accessor
/// functions.
///
/// Camera drivers should only access the type and pl members directly,
/// and use accessor functions for the rest.
class GPPort extends ffi.Struct {}

/// \brief Serial pins.
///
/// A number of serial pins to trigger and pull. This is necessary
/// for some devices that have more than just the regular 3 or 4 wires.
abstract class GPPin {
  /// < \brief RTS line
  static const int GP_PIN_RTS = 0;

  /// < \brief DTR line
  static const int GP_PIN_DTR = 1;

  /// < \brief CTS line
  static const int GP_PIN_CTS = 2;

  /// < \brief DSR line
  static const int GP_PIN_DSR = 3;

  /// < \brief Carrier Detect line
  static const int GP_PIN_CD = 4;

  /// < \brief RING (Modem) line
  static const int GP_PIN_RING = 5;
}

/// \brief Level to pull specific lines.
///
/// The level on which to pull some of the serial lines.
abstract class GPLevel {
  /// < \brief Pull to low (0V)
  static const int GP_LEVEL_LOW = 0;

  /// < \brief Pull to high (nV)
  static const int GP_LEVEL_HIGH = 1;
}

const int GP_PORT_USB_ENDPOINT_IN = 0;

const int GP_PORT_USB_ENDPOINT_OUT = 1;

const int GP_PORT_USB_ENDPOINT_INT = 2;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const String GP_MIME_TXT = 'text/plain';

const String GP_MIME_WAV = 'audio/wav';

const String GP_MIME_RAW = 'image/x-raw';

const String GP_MIME_PNG = 'image/png';

const String GP_MIME_PGM = 'image/x-portable-graymap';

const String GP_MIME_PPM = 'image/x-portable-pixmap';

const String GP_MIME_PNM = 'image/x-portable-anymap';

const String GP_MIME_JPEG = 'image/jpeg';

const String GP_MIME_TIFF = 'image/tiff';

const String GP_MIME_BMP = 'image/bmp';

const String GP_MIME_QUICKTIME = 'video/quicktime';

const String GP_MIME_AVI = 'video/x-msvideo';

const String GP_MIME_CRW = 'image/x-canon-raw';

const String GP_MIME_CR2 = 'image/x-canon-cr2';

const String GP_MIME_CR3 = 'image/x-canon-cr3';

const String GP_MIME_NEF = 'image/x-nikon-nef';

const String GP_MIME_UNKNOWN = 'application/octet-stream';

const String GP_MIME_EXIF = 'application/x-exif';

const String GP_MIME_MP3 = 'audio/mpeg';

const String GP_MIME_OGG = 'application/ogg';

const String GP_MIME_WMA = 'audio/x-wma';

const String GP_MIME_ASF = 'audio/x-asf';

const String GP_MIME_MPEG = 'video/mpeg';

const String GP_MIME_AVCHD = 'video/mp2t';

const String GP_MIME_RW2 = 'image/x-panasonic-raw2';

const String GP_MIME_ARW = 'image/x-sony-arw';

const int GP_ERROR_CORRUPTED_DATA = -102;

const int GP_ERROR_FILE_EXISTS = -103;

const int GP_ERROR_MODEL_NOT_FOUND = -105;

const int GP_ERROR_DIRECTORY_NOT_FOUND = -107;

const int GP_ERROR_FILE_NOT_FOUND = -108;

const int GP_ERROR_DIRECTORY_EXISTS = -109;

const int GP_ERROR_CAMERA_BUSY = -110;

const int GP_ERROR_PATH_NOT_ABSOLUTE = -111;

const int GP_ERROR_CANCEL = -112;

const int GP_ERROR_CAMERA_ERROR = -113;

const int GP_ERROR_OS_FAILURE = -114;

const int GP_ERROR_NO_SPACE = -115;

const int GP_LOG_ALL = 3;

const int GP_OK = 0;

const int GP_ERROR = -1;

const int GP_ERROR_BAD_PARAMETERS = -2;

const int GP_ERROR_NO_MEMORY = -3;

const int GP_ERROR_LIBRARY = -4;

const int GP_ERROR_UNKNOWN_PORT = -5;

const int GP_ERROR_NOT_SUPPORTED = -6;

const int GP_ERROR_IO = -7;

const int GP_ERROR_FIXED_LIMIT_EXCEEDED = -8;

const int GP_ERROR_TIMEOUT = -10;

const int GP_ERROR_IO_SUPPORTED_SERIAL = -20;

const int GP_ERROR_IO_SUPPORTED_USB = -21;

const int GP_ERROR_IO_INIT = -31;

const int GP_ERROR_IO_READ = -34;

const int GP_ERROR_IO_WRITE = -35;

const int GP_ERROR_IO_UPDATE = -37;

const int GP_ERROR_IO_SERIAL_SPEED = -41;

const int GP_ERROR_IO_USB_CLEAR_HALT = -51;

const int GP_ERROR_IO_USB_FIND = -52;

const int GP_ERROR_IO_USB_CLAIM = -53;

const int GP_ERROR_IO_LOCK = -60;

const int GP_ERROR_HAL = -70;

const int TRUE = 1;

const int FALSE = 0;

const int GP_PORT_MAX_BUF_LEN = 4096;

const int PIN_CTS = 2;

typedef _c_gp_abilities_list_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraAbilitiesList>> list,
);

typedef _dart_gp_abilities_list_new = int Function(
  ffi.Pointer<ffi.Pointer<_CameraAbilitiesList>> list,
);

typedef _c_gp_abilities_list_free = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _dart_gp_abilities_list_free = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _c_gp_abilities_list_load = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_abilities_list_load = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_abilities_list_load_dir = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int8> dir,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_abilities_list_load_dir = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int8> dir,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_abilities_list_reset = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _dart_gp_abilities_list_reset = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _c_gp_abilities_list_detect = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int32> info_list,
  ffi.Pointer<ffi.Int32> l,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_abilities_list_detect = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int32> info_list,
  ffi.Pointer<ffi.Int32> l,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_abilities_list_count = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _dart_gp_abilities_list_count = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
);

typedef _c_gp_abilities_list_lookup_model = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int8> model,
);

typedef _dart_gp_abilities_list_lookup_model = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Pointer<ffi.Int8> model,
);

typedef _c_gp_abilities_list_get_abilities = ffi.Int32 Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  ffi.Int32 index,
  ffi.Pointer<CameraAbilities> abilities,
);

typedef _dart_gp_abilities_list_get_abilities = int Function(
  ffi.Pointer<_CameraAbilitiesList> list,
  int index,
  ffi.Pointer<CameraAbilities> abilities,
);

typedef _c_gp_message_codeset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_gp_message_codeset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_gp_camera_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_Camera>> camera,
);

typedef _dart_gp_camera_new = int Function(
  ffi.Pointer<ffi.Pointer<_Camera>> camera,
);

typedef _c_gp_camera_set_abilities = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Int32 abilities,
);

typedef _dart_gp_camera_set_abilities = int Function(
  ffi.Pointer<_Camera> camera,
  int abilities,
);

typedef _c_gp_camera_get_abilities = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> abilities,
);

typedef _dart_gp_camera_get_abilities = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> abilities,
);

typedef _c_gp_camera_set_port_info = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Int32 info,
);

typedef _dart_gp_camera_set_port_info = int Function(
  ffi.Pointer<_Camera> camera,
  int info,
);

typedef _c_gp_camera_get_port_info = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> info,
);

typedef _dart_gp_camera_get_port_info = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> info,
);

typedef _c_gp_camera_set_port_speed = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Int32 speed,
);

typedef _dart_gp_camera_set_port_speed = int Function(
  ffi.Pointer<_Camera> camera,
  int speed,
);

typedef _c_gp_camera_get_port_speed = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
);

typedef _dart_gp_camera_get_port_speed = int Function(
  ffi.Pointer<_Camera> camera,
);

typedef _c_gp_camera_autodetect = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_autodetect = int Function(
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_init = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_init = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_exit = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_exit = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_ref = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
);

typedef _dart_gp_camera_ref = int Function(
  ffi.Pointer<_Camera> camera,
);

typedef _c_gp_camera_unref = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
);

typedef _dart_gp_camera_unref = int Function(
  ffi.Pointer<_Camera> camera,
);

typedef _c_gp_camera_free = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
);

typedef _dart_gp_camera_free = int Function(
  ffi.Pointer<_Camera> camera,
);

typedef _c_gp_camera_get_config = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> window,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_config = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> window,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_list_config = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_list_config = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_get_single_config = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> widget,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_single_config = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> widget,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_set_config = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> window,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_set_config = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> window,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_set_single_config = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> widget,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_set_single_config = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> widget,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_get_summary = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> summary,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_summary = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> summary,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_get_manual = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> manual,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_manual = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> manual,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_get_about = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> about,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_about = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<CameraText> about,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_capture = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Int32 type,
  ffi.Pointer<CameraFilePath> path,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_capture = int Function(
  ffi.Pointer<_Camera> camera,
  int type,
  ffi.Pointer<CameraFilePath> path,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_trigger_capture = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_trigger_capture = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_capture_preview = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_capture_preview = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_wait_for_event = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Int32 timeout,
  ffi.Pointer<ffi.Int32> eventtype,
  ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_wait_for_event = int Function(
  ffi.Pointer<_Camera> camera,
  int timeout,
  ffi.Pointer<ffi.Int32> eventtype,
  ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_get_storageinfo = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_get_storageinfo = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_list_files = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_list_files = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_list_folders = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_list_folders = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_delete_all = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_delete_all = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_put_file = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_put_file = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  int type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_make_dir = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_make_dir = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_folder_remove_dir = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_folder_remove_dir = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_file_get_info = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_file_get_info = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_file_set_info = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_file_set_info = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  int info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_file_get = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> camera_file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_file_get = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  int type,
  ffi.Pointer<ffi.Int32> camera_file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_file_read = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 type,
  ffi.Int32 offset,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_file_read = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  int type,
  int offset,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Int32> size,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_camera_file_delete = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_camera_file_delete = int Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef CameraTimeoutFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraTimeoutStartFunc = ffi.Uint32 Function(
  ffi.Pointer<_Camera>,
  ffi.Uint32,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutFunc>>,
  ffi.Pointer<ffi.Void>,
);

typedef CameraTimeoutStopFunc = ffi.Void Function(
  ffi.Pointer<_Camera>,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_camera_set_timeout_funcs = ffi.Void Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutStartFunc>> start_func,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutStopFunc>> stop_func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_camera_set_timeout_funcs = void Function(
  ffi.Pointer<_Camera> camera,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutStartFunc>> start_func,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutStopFunc>> stop_func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gp_camera_start_timeout = ffi.Int32 Function(
  ffi.Pointer<_Camera> camera,
  ffi.Uint32 timeout,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutFunc>> func,
);

typedef _dart_gp_camera_start_timeout = int Function(
  ffi.Pointer<_Camera> camera,
  int timeout,
  ffi.Pointer<ffi.NativeFunction<CameraTimeoutFunc>> func,
);

typedef _c_gp_camera_stop_timeout = ffi.Void Function(
  ffi.Pointer<_Camera> camera,
  ffi.Uint32 id,
);

typedef _dart_gp_camera_stop_timeout = void Function(
  ffi.Pointer<_Camera> camera,
  int id,
);

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c_gp_context_new = ffi.Pointer<_GPContext> Function();

typedef _dart_gp_context_new = ffi.Pointer<_GPContext> Function();

typedef _c_gp_context_ref = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
);

typedef _dart_gp_context_ref = void Function(
  ffi.Pointer<_GPContext> context,
);

typedef _c_gp_context_unref = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
);

typedef _dart_gp_context_unref = void Function(
  ffi.Pointer<_GPContext> context,
);

typedef GPContextIdleFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_idle_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextIdleFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_idle_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextIdleFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextProgressStartFunc = ffi.Uint32 Function(
  ffi.Pointer<_GPContext>,
  ffi.Float,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef GPContextProgressUpdateFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Uint32,
  ffi.Float,
  ffi.Pointer<ffi.Void>,
);

typedef GPContextProgressStopFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_progress_funcs = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressStartFunc>> start_func,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressUpdateFunc>> update_func,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressStopFunc>> stop_func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_progress_funcs = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressStartFunc>> start_func,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressUpdateFunc>> update_func,
  ffi.Pointer<ffi.NativeFunction<GPContextProgressStopFunc>> stop_func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextErrorFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_error_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextErrorFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_error_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextErrorFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextStatusFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_status_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextStatusFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_status_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextStatusFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextQuestionFunc = ffi.Int32 Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_question_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextQuestionFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_question_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextQuestionFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextCancelFunc = ffi.Int32 Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_cancel_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextCancelFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_cancel_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextCancelFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef GPContextMessageFunc = ffi.Void Function(
  ffi.Pointer<_GPContext>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_context_set_message_func = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextMessageFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_context_set_message_func = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.NativeFunction<GPContextMessageFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gp_context_idle = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
);

typedef _dart_gp_context_idle = void Function(
  ffi.Pointer<_GPContext> context,
);

typedef _c_gp_context_error = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_context_error = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_context_status = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_context_status = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_context_message = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_context_message = void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_context_question = ffi.Int32 Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_context_question = int Function(
  ffi.Pointer<_GPContext> context,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_context_cancel = ffi.Int32 Function(
  ffi.Pointer<_GPContext> context,
);

typedef _dart_gp_context_cancel = int Function(
  ffi.Pointer<_GPContext> context,
);

typedef _c_gp_context_progress_start = ffi.Uint32 Function(
  ffi.Pointer<_GPContext> context,
  ffi.Float target,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_context_progress_start = int Function(
  ffi.Pointer<_GPContext> context,
  double target,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_context_progress_update = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Uint32 id,
  ffi.Float current,
);

typedef _dart_gp_context_progress_update = void Function(
  ffi.Pointer<_GPContext> context,
  int id,
  double current,
);

typedef _c_gp_context_progress_stop = ffi.Void Function(
  ffi.Pointer<_GPContext> context,
  ffi.Uint32 id,
);

typedef _dart_gp_context_progress_stop = void Function(
  ffi.Pointer<_GPContext> context,
  int id,
);

typedef _c__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef _c__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef _c__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef _c__wasctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__wasctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c__wasctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<tm> _Tm,
);

typedef _dart__wasctime_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<tm> _Tm,
);

typedef _c_wcsftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_wcsftime = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _c__wcsftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsftime_l = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wctime32 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime32 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__wctime32_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime32_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__wctime64 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime64 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__wctime64_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime64_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__wstrdate_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wstrdate_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
);

typedef _c__wstrdate = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__wstrdate = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _c__wstrtime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wstrtime_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
);

typedef _c__wstrtime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _dart__wstrtime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
);

typedef _c__wctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__wctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__wctime_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c___daylight = ffi.Pointer<ffi.Int32> Function();

typedef _dart___daylight = ffi.Pointer<ffi.Int32> Function();

typedef _c___dstbias = ffi.Pointer<ffi.Int64> Function();

typedef _dart___dstbias = ffi.Pointer<ffi.Int64> Function();

typedef _c___timezone = ffi.Pointer<ffi.Int64> Function();

typedef _dart___timezone = ffi.Pointer<ffi.Int64> Function();

typedef _c___tzname = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart___tzname = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _c__get_daylight = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Daylight,
);

typedef _dart__get_daylight = int Function(
  ffi.Pointer<ffi.Int32> _Daylight,
);

typedef _c__get_dstbias = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
);

typedef _dart__get_dstbias = int Function(
  ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
);

typedef _c__get_timezone = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> _TimeZone,
);

typedef _dart__get_timezone = int Function(
  ffi.Pointer<ffi.Int64> _TimeZone,
);

typedef _c__get_tzname = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _ReturnValue,
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _Index,
);

typedef _dart__get_tzname = int Function(
  ffi.Pointer<ffi.Uint64> _ReturnValue,
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  int _Index,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c_asctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_asctime_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<tm> _Tm,
);

typedef _c_clock = ffi.Int64 Function();

typedef _dart_clock = int Function();

typedef _c__ctime32 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime32 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__ctime32_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime32_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__ctime64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__ctime64_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__ctime64_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__difftime32 = ffi.Double Function(
  ffi.Int64 _Time1,
  ffi.Int64 _Time2,
);

typedef _dart__difftime32 = double Function(
  int _Time1,
  int _Time2,
);

typedef _c__difftime64 = ffi.Double Function(
  ffi.Int64 _Time1,
  ffi.Int64 _Time2,
);

typedef _dart__difftime64 = double Function(
  int _Time1,
  int _Time2,
);

typedef _c__gmtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__gmtime32_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime32_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__gmtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__gmtime64_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__gmtime64_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__localtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime32 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__localtime32_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime32_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__localtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime64 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__localtime64_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__localtime64_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__mkgmtime32 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mkgmtime32 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c__mkgmtime64 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mkgmtime64 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c__mktime32 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mktime32 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c__mktime64 = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mktime64 = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
);

typedef _c__strftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _MaxSize,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strftime_l = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _MaxSize,
  ffi.Pointer<ffi.Int8> _Format,
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strdate_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
);

typedef _dart__strdate_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
);

typedef _c__strdate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__strdate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _c__strtime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
);

typedef _dart__strtime_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
);

typedef _c__strtime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _dart__strtime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Buffer,
);

typedef _c__time32 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__time32 = int Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__time64 = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart__time64 = int Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__timespec32_get = ffi.Int32 Function(
  ffi.Pointer<_timespec32> _Ts,
  ffi.Int32 _Base,
);

typedef _dart__timespec32_get = int Function(
  ffi.Pointer<_timespec32> _Ts,
  int _Base,
);

typedef _c__timespec64_get = ffi.Int32 Function(
  ffi.Pointer<_timespec64> _Ts,
  ffi.Int32 _Base,
);

typedef _dart__timespec64_get = int Function(
  ffi.Pointer<_timespec64> _Ts,
  int _Base,
);

typedef _c__tzset = ffi.Void Function();

typedef _dart__tzset = void Function();

typedef _c__getsystime = ffi.Uint32 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__getsystime = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c__setsystime = ffi.Uint32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Uint32 _Milliseconds,
);

typedef _dart__setsystime = int Function(
  ffi.Pointer<tm> _Tm,
  int _Milliseconds,
);

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 _Time1,
  ffi.Int64 _Time2,
);

typedef _dart_difftime = double Function(
  int _Time1,
  int _Time2,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c__mkgmtime = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart__mkgmtime = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> _Tm,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> _Tm,
);

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> _Ts,
  ffi.Int32 _Base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> _Ts,
  int _Base,
);

typedef _c_ctime_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_ctime_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_gmtime_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_gmtime_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_localtime_s = ffi.Int32 Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _dart_localtime_s = int Function(
  ffi.Pointer<tm> _Tm,
  ffi.Pointer<ffi.Int64> _Time,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_gp_file_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
);

typedef _dart_gp_file_new = int Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
);

typedef _c_gp_file_new_from_fd = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
  ffi.Int32 fd,
);

typedef _dart_gp_file_new_from_fd = int Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
  int fd,
);

typedef _c_gp_file_new_from_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
  ffi.Pointer<CameraFileHandler> handler,
  ffi.Pointer<ffi.Void> priv,
);

typedef _dart_gp_file_new_from_handler = int Function(
  ffi.Pointer<ffi.Pointer<_CameraFile>> file,
  ffi.Pointer<CameraFileHandler> handler,
  ffi.Pointer<ffi.Void> priv,
);

typedef _c_gp_file_ref = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_ref = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_unref = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_unref = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_free = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_free = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_set_name = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_file_set_name = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_file_get_name = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_gp_file_get_name = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_gp_file_set_mime_type = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> mime_type,
);

typedef _dart_gp_file_set_mime_type = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> mime_type,
);

typedef _c_gp_file_get_mime_type = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mime_type,
);

typedef _dart_gp_file_get_mime_type = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mime_type,
);

typedef _c_gp_file_set_mtime = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Int64 mtime,
);

typedef _dart_gp_file_set_mtime = int Function(
  ffi.Pointer<_CameraFile> file,
  int mtime,
);

typedef _c_gp_file_get_mtime = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int64> mtime,
);

typedef _dart_gp_file_get_mtime = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int64> mtime,
);

typedef _c_gp_file_detect_mime_type = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_detect_mime_type = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_adjust_name_for_mime_type = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_adjust_name_for_mime_type = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_get_name_by_type = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> basename,
  ffi.Int32 type,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> newname,
);

typedef _dart_gp_file_get_name_by_type = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> basename,
  int type,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> newname,
);

typedef _c_gp_file_set_data_and_size = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  ffi.Uint64 size,
);

typedef _dart_gp_file_set_data_and_size = int Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_file_get_data_and_size = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _dart_gp_file_get_data_and_size = int Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _c_gp_file_open = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_gp_file_open = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_gp_file_save = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_gp_file_save = int Function(
  ffi.Pointer<_CameraFile> file,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_gp_file_clean = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _dart_gp_file_clean = int Function(
  ffi.Pointer<_CameraFile> file,
);

typedef _c_gp_file_copy = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> destination,
  ffi.Pointer<_CameraFile> source,
);

typedef _dart_gp_file_copy = int Function(
  ffi.Pointer<_CameraFile> destination,
  ffi.Pointer<_CameraFile> source,
);

typedef _c_gp_file_append = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  ffi.Uint64 size,
);

typedef _dart_gp_file_append = int Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_file_slurp = ffi.Int32 Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint64> readlen,
);

typedef _dart_gp_file_slurp = int Function(
  ffi.Pointer<_CameraFile> arg0,
  ffi.Pointer<ffi.Int8> data,
  int size,
  ffi.Pointer<ffi.Uint64> readlen,
);

typedef _c_gp_filesystem_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraFilesystem>> fs,
);

typedef _dart_gp_filesystem_new = int Function(
  ffi.Pointer<ffi.Pointer<_CameraFilesystem>> fs,
);

typedef _c_gp_filesystem_free = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _dart_gp_filesystem_free = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _c_gp_filesystem_append = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_append = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_set_file_noop = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_set_file_noop = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  int type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_delete_file_noop = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_delete_file_noop = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_reset = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _dart_gp_filesystem_reset = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _c_gp_filesystem_count = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_count = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_name = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Int32 filenumber,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_name = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  int filenumber,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_get_folder = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_get_folder = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_number = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_number = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_list_files = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_list_files = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_list_folders = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_list_folders = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> list,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_get_info = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<CameraFileInfo> info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_get_info = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<CameraFileInfo> info,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_get_file = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_get_file = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  int type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_read_file = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 type,
  ffi.Uint64 offset,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Uint64> size,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_read_file = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  int type,
  int offset,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Uint64> size,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_delete_file = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_delete_file = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_get_storageinfo = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Pointer<CameraStorageInformation>> arg1,
  ffi.Pointer<ffi.Int32> nrofstorageinformations,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_get_storageinfo = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Pointer<CameraStorageInformation>> arg1,
  ffi.Pointer<ffi.Int32> nrofstorageinformations,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_set_funcs = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<_CameraFilesystemFuncs> funcs,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_filesystem_set_funcs = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<_CameraFilesystemFuncs> funcs,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gp_filesystem_put_file = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_put_file = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> filename,
  int type,
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_delete_all = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_delete_all = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_make_dir = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_make_dir = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_remove_dir = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_gp_filesystem_remove_dir = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
  ffi.Pointer<ffi.Int8> folder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_filesystem_dump = ffi.Int32 Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _dart_gp_filesystem_dump = int Function(
  ffi.Pointer<_CameraFilesystem> fs,
);

typedef _c_camera_id = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> id,
);

typedef _dart_camera_id = int Function(
  ffi.Pointer<ffi.Int32> id,
);

typedef _c_camera_abilities = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> list,
);

typedef _dart_camera_abilities = int Function(
  ffi.Pointer<ffi.Int32> list,
);

typedef _c_camera_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_camera_init = int Function(
  ffi.Pointer<ffi.Int32> camera,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_gp_list_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_CameraList>> list,
);

typedef _dart_gp_list_new = int Function(
  ffi.Pointer<ffi.Pointer<_CameraList>> list,
);

typedef _c_gp_list_ref = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_ref = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_unref = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_unref = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_free = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_free = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_count = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_count = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_append = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_gp_list_append = int Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_gp_list_reset = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_reset = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_sort = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
);

typedef _dart_gp_list_sort = int Function(
  ffi.Pointer<_CameraList> list,
);

typedef _c_gp_list_find_by_name = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int32> index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_list_find_by_name = int Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int32> index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_list_get_name = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Int32 index,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_gp_list_get_name = int Function(
  ffi.Pointer<_CameraList> list,
  int index,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_gp_list_get_value = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Int32 index,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_gp_list_get_value = int Function(
  ffi.Pointer<_CameraList> list,
  int index,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_gp_list_set_name = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_list_set_name = int Function(
  ffi.Pointer<_CameraList> list,
  int index,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_list_set_value = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_gp_list_set_value = int Function(
  ffi.Pointer<_CameraList> list,
  int index,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_gp_list_populate = ffi.Int32 Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int8> format,
  ffi.Int32 count,
);

typedef _dart_gp_list_populate = int Function(
  ffi.Pointer<_CameraList> list,
  ffi.Pointer<ffi.Int8> format,
  int count,
);

typedef _c_gp_result_as_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 result,
);

typedef _dart_gp_result_as_string = ffi.Pointer<ffi.Int8> Function(
  int result,
);

typedef _c_gp_setting_set = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_gp_setting_set = int Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_gp_setting_get = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_gp_setting_get = int Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_gp_library_version = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Int32 verbose,
);

typedef _dart_gp_library_version = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  int verbose,
);

typedef _c_gp_widget_new = ffi.Int32 Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> label,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> widget,
);

typedef _dart_gp_widget_new = int Function(
  int type,
  ffi.Pointer<ffi.Int8> label,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> widget,
);

typedef _c_gp_widget_free = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_free = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_ref = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_ref = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_unref = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_unref = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_append = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<_CameraWidget> child,
);

typedef _dart_gp_widget_append = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<_CameraWidget> child,
);

typedef _c_gp_widget_prepend = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<_CameraWidget> child,
);

typedef _dart_gp_widget_prepend = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<_CameraWidget> child,
);

typedef _c_gp_widget_count_children = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_count_children = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_get_child = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Int32 child_number,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _dart_gp_widget_get_child = int Function(
  ffi.Pointer<_CameraWidget> widget,
  int child_number,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _c_gp_widget_get_child_by_label = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> label,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _dart_gp_widget_get_child_by_label = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> label,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _c_gp_widget_get_child_by_id = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Int32 id,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _dart_gp_widget_get_child_by_id = int Function(
  ffi.Pointer<_CameraWidget> widget,
  int id,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _c_gp_widget_get_child_by_name = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _dart_gp_widget_get_child_by_name = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> child,
);

typedef _c_gp_widget_get_root = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> root,
);

typedef _dart_gp_widget_get_root = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> root,
);

typedef _c_gp_widget_get_parent = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> parent,
);

typedef _dart_gp_widget_get_parent = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<_CameraWidget>> parent,
);

typedef _c_gp_widget_set_value = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_gp_widget_set_value = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_gp_widget_get_value = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_gp_widget_get_value = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_gp_widget_set_name = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_widget_set_name = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_widget_get_name = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_gp_widget_get_name = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_gp_widget_set_info = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> info,
);

typedef _dart_gp_widget_set_info = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> info,
);

typedef _c_gp_widget_get_info = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> info,
);

typedef _dart_gp_widget_get_info = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> info,
);

typedef _c_gp_widget_get_id = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> id,
);

typedef _dart_gp_widget_get_id = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> id,
);

typedef _c_gp_widget_get_type = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> type,
);

typedef _dart_gp_widget_get_type = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> type,
);

typedef _c_gp_widget_get_label = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> label,
);

typedef _dart_gp_widget_get_label = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> label,
);

typedef _c_gp_widget_set_range = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> range,
  ffi.Float low,
  ffi.Float high,
  ffi.Float increment,
);

typedef _dart_gp_widget_set_range = int Function(
  ffi.Pointer<_CameraWidget> range,
  double low,
  double high,
  double increment,
);

typedef _c_gp_widget_get_range = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> range,
  ffi.Pointer<ffi.Float> min,
  ffi.Pointer<ffi.Float> max,
  ffi.Pointer<ffi.Float> increment,
);

typedef _dart_gp_widget_get_range = int Function(
  ffi.Pointer<_CameraWidget> range,
  ffi.Pointer<ffi.Float> min,
  ffi.Pointer<ffi.Float> max,
  ffi.Pointer<ffi.Float> increment,
);

typedef _c_gp_widget_add_choice = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> choice,
);

typedef _dart_gp_widget_add_choice = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int8> choice,
);

typedef _c_gp_widget_count_choices = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_count_choices = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_get_choice = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Int32 choice_number,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> choice,
);

typedef _dart_gp_widget_get_choice = int Function(
  ffi.Pointer<_CameraWidget> widget,
  int choice_number,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> choice,
);

typedef _c_gp_widget_changed = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _dart_gp_widget_changed = int Function(
  ffi.Pointer<_CameraWidget> widget,
);

typedef _c_gp_widget_set_changed = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Int32 changed,
);

typedef _dart_gp_widget_set_changed = int Function(
  ffi.Pointer<_CameraWidget> widget,
  int changed,
);

typedef _c_gp_widget_set_readonly = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Int32 readonly,
);

typedef _dart_gp_widget_set_readonly = int Function(
  ffi.Pointer<_CameraWidget> widget,
  int readonly,
);

typedef _c_gp_widget_get_readonly = ffi.Int32 Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> readonly,
);

typedef _dart_gp_widget_get_readonly = int Function(
  ffi.Pointer<_CameraWidget> widget,
  ffi.Pointer<ffi.Int32> readonly,
);

typedef _c_gp_bayer_expand = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> input,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Pointer<ffi.Uint8> output,
  ffi.Int32 tile,
);

typedef _dart_gp_bayer_expand = int Function(
  ffi.Pointer<ffi.Uint8> input,
  int w,
  int h,
  ffi.Pointer<ffi.Uint8> output,
  int tile,
);

typedef _c_gp_bayer_decode = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> input,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Pointer<ffi.Uint8> output,
  ffi.Int32 tile,
);

typedef _dart_gp_bayer_decode = int Function(
  ffi.Pointer<ffi.Uint8> input,
  int w,
  int h,
  ffi.Pointer<ffi.Uint8> output,
  int tile,
);

typedef _c_gp_bayer_interpolate = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> image,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Int32 tile,
);

typedef _dart_gp_bayer_interpolate = int Function(
  ffi.Pointer<ffi.Uint8> image,
  int w,
  int h,
  int tile,
);

typedef _c_gp_ahd_decode = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> input,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Pointer<ffi.Uint8> output,
  ffi.Int32 tile,
);

typedef _dart_gp_ahd_decode = int Function(
  ffi.Pointer<ffi.Uint8> input,
  int w,
  int h,
  ffi.Pointer<ffi.Uint8> output,
  int tile,
);

typedef _c_gp_ahd_interpolate = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> image,
  ffi.Int32 w,
  ffi.Int32 h,
  ffi.Int32 tile,
);

typedef _dart_gp_ahd_interpolate = int Function(
  ffi.Pointer<ffi.Uint8> image,
  int w,
  int h,
  int tile,
);

typedef _c_gpi_exif_get_thumbnail_and_size = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> exifdat,
  ffi.Pointer<ffi.Int64> size,
);

typedef _dart_gpi_exif_get_thumbnail_and_size = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> exifdat,
  ffi.Pointer<ffi.Int64> size,
);

typedef _c_gpi_exif_stat = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> exifdata,
);

typedef _dart_gpi_exif_stat = int Function(
  ffi.Pointer<ffi.Void> exifdata,
);

typedef _c_gp_gamma_fill_table = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> table,
  ffi.Double g,
);

typedef _dart_gp_gamma_fill_table = int Function(
  ffi.Pointer<ffi.Uint8> table,
  double g,
);

typedef _c_gp_gamma_correct_single = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> table,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint32 data_size,
);

typedef _dart_gp_gamma_correct_single = int Function(
  ffi.Pointer<ffi.Uint8> table,
  ffi.Pointer<ffi.Uint8> data,
  int data_size,
);

typedef _c_gpi_jpeg_chunk_new = ffi.Pointer<chunk> Function(
  ffi.Int32 length,
);

typedef _dart_gpi_jpeg_chunk_new = ffi.Pointer<chunk> Function(
  int length,
);

typedef _c_gpi_jpeg_chunk_new_filled = ffi.Pointer<chunk> Function(
  ffi.Int32 length,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_gpi_jpeg_chunk_new_filled = ffi.Pointer<chunk> Function(
  int length,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_gpi_jpeg_chunk_destroy = ffi.Void Function(
  ffi.Pointer<chunk> mychunk,
);

typedef _dart_gpi_jpeg_chunk_destroy = void Function(
  ffi.Pointer<chunk> mychunk,
);

typedef _c_gpi_jpeg_chunk_print = ffi.Void Function(
  ffi.Pointer<chunk> mychunk,
);

typedef _dart_gpi_jpeg_chunk_print = void Function(
  ffi.Pointer<chunk> mychunk,
);

typedef _c_gpi_jpeg_findff = ffi.Int8 Function(
  ffi.Pointer<ffi.Int32> location,
  ffi.Pointer<chunk> picture,
);

typedef _dart_gpi_jpeg_findff = int Function(
  ffi.Pointer<ffi.Int32> location,
  ffi.Pointer<chunk> picture,
);

typedef _c_gpi_jpeg_findactivemarker = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int32> location,
  ffi.Pointer<chunk> picture,
);

typedef _dart_gpi_jpeg_findactivemarker = int Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int32> location,
  ffi.Pointer<chunk> picture,
);

typedef _c_gpi_jpeg_markername = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 c,
);

typedef _dart_gpi_jpeg_markername = ffi.Pointer<ffi.Int8> Function(
  int c,
);

typedef _c_gpi_jpeg_new = ffi.Pointer<jpeg> Function();

typedef _dart_gpi_jpeg_new = ffi.Pointer<jpeg> Function();

typedef _c_gpi_jpeg_destroy = ffi.Void Function(
  ffi.Pointer<jpeg> myjpeg,
);

typedef _dart_gpi_jpeg_destroy = void Function(
  ffi.Pointer<jpeg> myjpeg,
);

typedef _c_gpi_jpeg_add_marker = ffi.Void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> picture,
  ffi.Int32 start,
  ffi.Int32 end,
);

typedef _dart_gpi_jpeg_add_marker = void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> picture,
  int start,
  int end,
);

typedef _c_gpi_jpeg_add_chunk = ffi.Void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> source,
);

typedef _dart_gpi_jpeg_add_chunk = void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> source,
);

typedef _c_gpi_jpeg_parse = ffi.Void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> picture,
);

typedef _dart_gpi_jpeg_parse = void Function(
  ffi.Pointer<jpeg> myjpeg,
  ffi.Pointer<chunk> picture,
);

typedef _c_gpi_jpeg_print = ffi.Void Function(
  ffi.Pointer<jpeg> myjpeg,
);

typedef _dart_gpi_jpeg_print = void Function(
  ffi.Pointer<jpeg> myjpeg,
);

typedef _c_gpi_jpeg_make_start = ffi.Pointer<chunk> Function();

typedef _dart_gpi_jpeg_make_start = ffi.Pointer<chunk> Function();

typedef _c_gpi_jpeg_make_SOFC = ffi.Pointer<chunk> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int8 vh1,
  ffi.Int8 vh2,
  ffi.Int8 vh3,
  ffi.Int8 q1,
  ffi.Int8 q2,
  ffi.Int8 q3,
);

typedef _dart_gpi_jpeg_make_SOFC = ffi.Pointer<chunk> Function(
  int width,
  int height,
  int vh1,
  int vh2,
  int vh3,
  int q1,
  int q2,
  int q3,
);

typedef _c_gpi_jpeg_makeSsSeAhAl = ffi.Pointer<chunk> Function(
  ffi.Int32 huffset1,
  ffi.Int32 huffset2,
  ffi.Int32 huffset3,
);

typedef _dart_gpi_jpeg_makeSsSeAhAl = ffi.Pointer<chunk> Function(
  int huffset1,
  int huffset2,
  int huffset3,
);

typedef _c_gpi_jpeg_print_quantization_table = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
);

typedef _dart_gpi_jpeg_print_quantization_table = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
);

typedef _c_gpi_jpeg_make_quantization = ffi.Pointer<chunk> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
  ffi.Int8 number,
);

typedef _dart_gpi_jpeg_make_quantization = ffi.Pointer<chunk> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> table,
  int number,
);

typedef _c_gpi_jpeg_quantization2table = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<chunk> qmarker,
);

typedef _dart_gpi_jpeg_quantization2table = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<chunk> qmarker,
);

typedef _c_gpi_jpeg_header = ffi.Pointer<jpeg> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int8 vh1,
  ffi.Int8 vh2,
  ffi.Int8 vh3,
  ffi.Int8 q1,
  ffi.Int8 q2,
  ffi.Int8 q3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> quant1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> quant2,
  ffi.Int8 huffset1,
  ffi.Int8 huffset2,
  ffi.Int8 huffset3,
  ffi.Pointer<chunk> huff1,
  ffi.Pointer<chunk> huff2,
  ffi.Pointer<chunk> huff3,
  ffi.Pointer<chunk> huff4,
);

typedef _dart_gpi_jpeg_header = ffi.Pointer<jpeg> Function(
  int width,
  int height,
  int vh1,
  int vh2,
  int vh3,
  int q1,
  int q2,
  int q3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> quant1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> quant2,
  int huffset1,
  int huffset2,
  int huffset3,
  ffi.Pointer<chunk> huff1,
  ffi.Pointer<chunk> huff2,
  ffi.Pointer<chunk> huff3,
  ffi.Pointer<chunk> huff4,
);

typedef _c_gpi_jpeg_write = ffi.Int8 Function(
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<jpeg> myjpeg,
);

typedef _dart_gpi_jpeg_write = int Function(
  ffi.Pointer<ffi.Int32> file,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<jpeg> myjpeg,
);

typedef _c_gp_port_info_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
);

typedef _dart_gp_port_info_new = int Function(
  ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
);

typedef _c_gp_port_info_get_name = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_gp_port_info_get_name = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_gp_port_info_set_name = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_port_info_set_name = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_port_info_get_path = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> path,
);

typedef _dart_gp_port_info_get_path = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> path,
);

typedef _c_gp_port_info_set_path = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_gp_port_info_set_path = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_gp_port_info_get_type = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int32> type,
);

typedef _dart_gp_port_info_get_type = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int32> type,
);

typedef _c_gp_port_info_set_type = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Int32 type,
);

typedef _dart_gp_port_info_set_type = int Function(
  ffi.Pointer<_GPPortInfo> info,
  int type,
);

typedef _c_gp_port_info_get_library_filename = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lib,
);

typedef _dart_gp_port_info_get_library_filename = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lib,
);

typedef _c_gp_port_info_set_library_filename = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> lib,
);

typedef _dart_gp_port_info_set_library_filename = int Function(
  ffi.Pointer<_GPPortInfo> info,
  ffi.Pointer<ffi.Int8> lib,
);

typedef _c_gp_port_info_list_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_GPPortInfoList>> list,
);

typedef _dart_gp_port_info_list_new = int Function(
  ffi.Pointer<ffi.Pointer<_GPPortInfoList>> list,
);

typedef _c_gp_port_info_list_free = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _dart_gp_port_info_list_free = int Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _c_gp_port_info_list_append = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<_GPPortInfo> info,
);

typedef _dart_gp_port_info_list_append = int Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<_GPPortInfo> info,
);

typedef _c_gp_port_info_list_load = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _dart_gp_port_info_list_load = int Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _c_gp_port_info_list_count = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _dart_gp_port_info_list_count = int Function(
  ffi.Pointer<_GPPortInfoList> list,
);

typedef _c_gp_port_info_list_lookup_path = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_gp_port_info_list_lookup_path = int Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_gp_port_info_list_lookup_name = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gp_port_info_list_lookup_name = int Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gp_port_info_list_get_info = ffi.Int32 Function(
  ffi.Pointer<_GPPortInfoList> list,
  ffi.Int32 n,
  ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
);

typedef _dart_gp_port_info_list_get_info = int Function(
  ffi.Pointer<_GPPortInfoList> list,
  int n,
  ffi.Pointer<ffi.Pointer<_GPPortInfo>> info,
);

typedef _c_gp_port_message_codeset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_gp_port_message_codeset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_gp_port_library_type = ffi.Int32 Function();

typedef _dart_gp_port_library_type = int Function();

typedef _c_gp_port_library_list = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> list,
);

typedef _dart_gp_port_library_list = int Function(
  ffi.Pointer<ffi.Int32> list,
);

typedef _c_gp_port_library_operations = ffi.Pointer<GPPortOperations>
    Function();

typedef _dart_gp_port_library_operations = ffi.Pointer<GPPortOperations>
    Function();

typedef GPLogFunc = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gp_log_add_func = ffi.Int32 Function(
  ffi.Int32 level,
  ffi.Pointer<ffi.NativeFunction<GPLogFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gp_log_add_func = int Function(
  int level,
  ffi.Pointer<ffi.NativeFunction<GPLogFunc>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gp_log_remove_func = ffi.Int32 Function(
  ffi.Int32 id,
);

typedef _dart_gp_log_remove_func = int Function(
  int id,
);

typedef _c_gp_log = ffi.Void Function(
  ffi.Int32 level,
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_log = void Function(
  int level,
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_log_with_source_location = ffi.Void Function(
  ffi.Int32 level,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 line,
  ffi.Pointer<ffi.Int8> func,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_log_with_source_location = void Function(
  int level,
  ffi.Pointer<ffi.Int8> file,
  int line,
  ffi.Pointer<ffi.Int8> func,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_logv = ffi.Void Function(
  ffi.Int32 level,
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<ffi.Int8> args,
);

typedef _dart_gp_logv = void Function(
  int level,
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<ffi.Int8> args,
);

typedef _c_gp_log_data = ffi.Void Function(
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> data,
  ffi.Uint32 size,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_log_data = void Function(
  ffi.Pointer<ffi.Int8> domain,
  ffi.Pointer<ffi.Int8> data,
  int size,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_port_result_as_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 result,
);

typedef _dart_gp_port_result_as_string = ffi.Pointer<ffi.Int8> Function(
  int result,
);

typedef _c_gp_port_library_version = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Int32 verbose,
);

typedef _dart_gp_port_library_version = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  int verbose,
);

typedef _c_gp_port_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<GPPort>> port,
);

typedef _dart_gp_port_new = int Function(
  ffi.Pointer<ffi.Pointer<GPPort>> port,
);

typedef _c_gp_port_free = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
);

typedef _dart_gp_port_free = int Function(
  ffi.Pointer<GPPort> port,
);

typedef _c_gp_port_set_info = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 info,
);

typedef _dart_gp_port_set_info = int Function(
  ffi.Pointer<GPPort> port,
  int info,
);

typedef _c_gp_port_get_info = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int32> info,
);

typedef _dart_gp_port_get_info = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int32> info,
);

typedef _c_gp_port_open = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
);

typedef _dart_gp_port_open = int Function(
  ffi.Pointer<GPPort> port,
);

typedef _c_gp_port_close = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
);

typedef _dart_gp_port_close = int Function(
  ffi.Pointer<GPPort> port,
);

typedef _c_gp_port_reset = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
);

typedef _dart_gp_port_reset = int Function(
  ffi.Pointer<GPPort> port,
);

typedef _c_gp_port_write = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 size,
);

typedef _dart_gp_port_write = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_port_read = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 size,
);

typedef _dart_gp_port_read = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_port_check_int = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 size,
);

typedef _dart_gp_port_check_int = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_port_check_int_fast = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 size,
);

typedef _dart_gp_port_check_int_fast = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> data,
  int size,
);

typedef _c_gp_port_get_timeout = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int32> timeout,
);

typedef _dart_gp_port_get_timeout = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int32> timeout,
);

typedef _c_gp_port_set_timeout = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 timeout,
);

typedef _dart_gp_port_set_timeout = int Function(
  ffi.Pointer<GPPort> port,
  int timeout,
);

typedef _c_gp_port_get_pin = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 pin,
  ffi.Pointer<ffi.Int32> level,
);

typedef _dart_gp_port_get_pin = int Function(
  ffi.Pointer<GPPort> port,
  int pin,
  ffi.Pointer<ffi.Int32> level,
);

typedef _c_gp_port_set_pin = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 pin,
  ffi.Int32 level,
);

typedef _dart_gp_port_set_pin = int Function(
  ffi.Pointer<GPPort> port,
  int pin,
  int level,
);

typedef _c_gp_port_send_break = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 duration,
);

typedef _dart_gp_port_send_break = int Function(
  ffi.Pointer<GPPort> port,
  int duration,
);

typedef _c_gp_port_flush = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 direction,
);

typedef _dart_gp_port_flush = int Function(
  ffi.Pointer<GPPort> port,
  int direction,
);

typedef _c_gp_port_usb_find_device = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 idvendor,
  ffi.Int32 idproduct,
);

typedef _dart_gp_port_usb_find_device = int Function(
  ffi.Pointer<GPPort> port,
  int idvendor,
  int idproduct,
);

typedef _c_gp_port_usb_find_device_by_class = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 mainclass,
  ffi.Int32 subclass,
  ffi.Int32 protocol,
);

typedef _dart_gp_port_usb_find_device_by_class = int Function(
  ffi.Pointer<GPPort> port,
  int mainclass,
  int subclass,
  int protocol,
);

typedef _c_gp_port_usb_clear_halt = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 ep,
);

typedef _dart_gp_port_usb_clear_halt = int Function(
  ffi.Pointer<GPPort> port,
  int ep,
);

typedef _c_gp_port_usb_msg_write = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_write = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_usb_msg_read = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_read = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_usb_msg_interface_write = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_interface_write = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_usb_msg_interface_read = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_interface_read = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_usb_msg_class_write = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_class_write = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_usb_msg_class_read = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 request,
  ffi.Int32 value,
  ffi.Int32 index,
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 size,
);

typedef _dart_gp_port_usb_msg_class_read = int Function(
  ffi.Pointer<GPPort> port,
  int request,
  int value,
  int index,
  ffi.Pointer<ffi.Int8> bytes,
  int size,
);

typedef _c_gp_port_seek = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 offset,
  ffi.Int32 whence,
);

typedef _dart_gp_port_seek = int Function(
  ffi.Pointer<GPPort> port,
  int offset,
  int whence,
);

typedef _c_gp_port_send_scsi_cmd = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Int32 to_dev,
  ffi.Pointer<ffi.Int8> cmd,
  ffi.Int32 cmd_size,
  ffi.Pointer<ffi.Int8> sense,
  ffi.Int32 sense_size,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 data_size,
);

typedef _dart_gp_port_send_scsi_cmd = int Function(
  ffi.Pointer<GPPort> port,
  int to_dev,
  ffi.Pointer<ffi.Int8> cmd,
  int cmd_size,
  ffi.Pointer<ffi.Int8> sense,
  int sense_size,
  ffi.Pointer<ffi.Int8> data,
  int data_size,
);

typedef _c_gp_port_set_error = ffi.Int32 Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gp_port_set_error = int Function(
  ffi.Pointer<GPPort> port,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gp_port_get_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<GPPort> port,
);

typedef _dart_gp_port_get_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<GPPort> port,
);

typedef CameraPrePostFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraExitFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraGetConfigFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Pointer<ffi.Int32>>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraSetConfigFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraListConfigFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraGetSingleConfigFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Pointer<ffi.Int32>>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraSetSingleConfigFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraCaptureFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Int32,
  ffi.Pointer<CameraFilePath>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraTriggerCaptureFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraCapturePreviewFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraSummaryFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<CameraText>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraManualFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<CameraText>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraAboutFunc = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Pointer<CameraText>,
  ffi.Pointer<ffi.Int32>,
);

typedef CameraWaitForEvent = ffi.Int32 Function(
  ffi.Pointer<_Camera>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_14 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef _typedefC_15 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef _typedefC_16 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_17 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_18 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_21 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_23 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_25 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_26 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_27 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);
